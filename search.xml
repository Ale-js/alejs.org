<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Debug mode</title>
      <link href="/guide/v1/ComponentDebug/"/>
      <url>/guide/v1/ComponentDebug/</url>
      
        <content type="html"><![CDATA[<h1 id="Debug-mode"><a href="#Debug-mode" class="headerlink" title="Debug mode"></a>Debug mode</h1><h3 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h3><p>When you have a huge front-end system, debugging can become a nightmare if there is no way to monitor data changes.</p><p>The occurrence of the <code>debug</code> parameter solves this problem well. You can add the <code>debug</code> parameter to the component <code>definition</code> or <code>render</code> (the debug parameter when rendering will completely override the debug parameter set at the time of definition):</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Added when defining */</span></span><br><span class="line">Ale(<span class="string">"test"</span>, &#123;</span><br><span class="line">    <span class="comment">/* ...... */</span></span><br><span class="line">    debug: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Or add it dynamically when rendering */</span></span><br><span class="line">Ale.render(<span class="string">"test"</span>, &#123;</span><br><span class="line">    <span class="comment">/* ...... */</span></span><br><span class="line">    debug: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The <code>debug</code> parameter has two built-in functions: <code>setter</code> and <code>getter</code>, which monitor the setting and getting of the component data respectively <strong>(where the setter and getter each require a parameter to receive the value)</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Ale(<span class="string">"test"</span>, &#123;</span><br><span class="line">    <span class="comment">/* ...... */</span></span><br><span class="line">    debug: &#123;</span><br><span class="line">        setter: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"You set me up as: "</span>+val);</span><br><span class="line">        &#125;,</span><br><span class="line">        getter: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"You got me: "</span>+val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p class="demo" id="app"></p><p>Above example code:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Ale(<span class="string">"test"</span>, &#123;</span><br><span class="line">    template: <span class="string">"Get or reset the value of app.data.data1 in the console, then view the output in the console"</span>,</span><br><span class="line">    debug: &#123;</span><br><span class="line">        setter: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"You set me up as: "</span>+val);</span><br><span class="line">        &#125;,</span><br><span class="line">        getter: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"You got me: "</span>+val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    data: &#123;</span><br><span class="line">        data1: <span class="string">"Hello"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Ale.render(<span class="string">"test"</span>, &#123;</span><br><span class="line">    el: <span class="string">"#app"</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><script src="../../../../js/Ale.min.js"></script><script>Ale("test", {    template: "Get or reset the value of app.data.data1 in the console, then view the output in the console",    debug: {        setter: function(val){            console.log("You set me up as: "+val);        },        getter: function(val){            console.log("You got me: "+val);        }    },    data: {        data1: "Hello"    }})Ale.render("test", {    el: "#app"})</script>]]></content>
      
      
      <categories>
          
          <category> v1 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Component object</title>
      <link href="/guide/v1/ComponentObj/"/>
      <url>/guide/v1/ComponentObj/</url>
      
        <content type="html"><![CDATA[<h1 id="Component-object"><a href="#Component-object" class="headerlink" title="Component object"></a>Component object</h1><h3 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h3><p>Whenever you <code>render</code> a component, Ale will return a <code>Ale component object</code>, you can define a variable to receive it:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Define a variable to receive an Ale component object */</span></span><br><span class="line"><span class="keyword">var</span> app = Ale.render(<span class="string">"test"</span>, &#123;</span><br><span class="line">    <span class="comment">/* ...... */</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p id="app" class="demo"></p><p>Letâ€™s click on the example above and you will see it output its own <code>Ale component object</code> in the console.</p><h3 id="Advanced"><a href="#Advanced" class="headerlink" title="Advanced"></a>Advanced</h3><p>But this creates a problem. If our component needs dynamic rendering, how do we get its <code>Ale component object</code>?</p><p>Very simple, you only need to use the <code>this</code> keyword in the properties of the support function to get <strong>(because the <code>template</code> property is special, the automatic binding is <code>this.data</code>, so use <code>this in the template property.</code>The representative refers to <code>this.data</code>)</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Define a component */</span></span><br><span class="line">Ale(<span class="string">"test"</span>, &#123;</span><br><span class="line">    life: &#123;</span><br><span class="line">        mounting: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>) <span class="comment">/* Here this refers to the Ale component object after rendering is completed. */</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>In the above example, you may not understand the role of the <code>life</code> attribute, but we will show you how to use it. For details, please continue to view the tutorial!</p><p>Currently all the properties of the supported function:</p><ul><li>template <strong>(Because the <code>template</code> attribute is special, it is automatically bound to <code>this.data</code>, so using <code>this</code> in the template attribute refers to <code>this.data</code>)</strong></li><li>life <strong>(the life attribute itself does not support functions, but its internal properties all support functions)</strong></li><li>debug <strong>(The debug property itself does not support functions, but its internal properties all support functions. <span style="color:red"> However, note that the internal function of debug will not bind this</span>)</strong></li></ul><script src="../../../../js/Ale.min.js"></script><script>Ale("aleComObj", {    template: "<button onclick='console.log(app)'>Click me to output my Ale component object in the console</button>"})var app = Ale.render("aleComObj", {    el: "#app"})</script>]]></content>
      
      
      <categories>
          
          <category> v1 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Composite component</title>
      <link href="/guide/v1/ComponentImport/"/>
      <url>/guide/v1/ComponentImport/</url>
      
        <content type="html"><![CDATA[<h1 id="Composite-component"><a href="#Composite-component" class="headerlink" title="Composite component"></a>Composite component</h1><h3 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h3><p>Ale allows you to bind any component with the <code>imports</code> property, and the new component will become a <code>composite component</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Define a component called test-1 */</span></span><br><span class="line">Ale(<span class="string">"test-1"</span>, &#123;</span><br><span class="line">    template: <span class="string">"Hello"</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Define a component named test and then import test-1 */</span></span><br><span class="line">Ale(<span class="string">"test"</span>, &#123;</span><br><span class="line">    imports: [<span class="string">"test-1"</span>], <span class="comment">/* Need to be an array here */</span></span><br><span class="line">    template: <span class="string">"World"</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Once complete, the <code>test</code> component becomes a composite component.</p><p>So now if we render the <code>test</code> component, it will only output <code>World</code> instead of the <code>HelloWorld</code> we need. At this point we can add the <code>test-1</code> component using the custom tag in the template properties of the <code>test</code> component:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Ale(<span class="string">"test"</span>, &#123;</span><br><span class="line">    imports: [<span class="string">"test-1"</span>],</span><br><span class="line">    template: <span class="string">"&lt;test-1/&gt;World"</span> <span class="comment">/* Note that here we render the test-1 component using the &lt;test-1/&gt; format. */</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Among them, we use the <code>&lt;test-1/&gt;</code> format to render the test-1 component, then it should be noted that the custom label can only be used in this format, <strong>even a space can not be added!</strong></p><p>Now letâ€™s render this component:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Ale.render(<span class="string">"test"</span>, &#123;</span><br><span class="line">    el: <span class="string">"#app"</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p class="demo" id="app"></p><p>Already working, right? In fact, you can not only import a single component, but also import a composite component:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Define a component called test-1 */</span></span><br><span class="line">Ale(<span class="string">"test-1"</span>, &#123;</span><br><span class="line">    template: <span class="string">"Hello"</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Define a component called test-2 */</span></span><br><span class="line">Ale(<span class="string">"test-2"</span>, &#123;</span><br><span class="line">    imports: [<span class="string">"test-1"</span>],</span><br><span class="line">    template: <span class="string">"&lt;test-1/&gt; "</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Define a component named test and then import test-2 */</span></span><br><span class="line">Ale(<span class="string">"test"</span>, &#123;</span><br><span class="line">    imports: [<span class="string">"test-2"</span>],</span><br><span class="line">    template: <span class="string">"&lt;test-2/&gt;World"</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p class="demo" id="app2"></p><h3 id="Advanced"><a href="#Advanced" class="headerlink" title="Advanced"></a>Advanced</h3><p>Composite components are compared to normal (single) components:</p><ul><li>The entire composite component shares a <code>data</code>. That is, there is no hierarchical relationship between composite components, and any component can manipulate data from all other components. <strong>(In addition, according to the order in which imports are imported, data of the same name will overwrite the previous data of the same name)</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Define a component called test-1 */</span></span><br><span class="line">Ale(<span class="string">"test-1"</span>, &#123;</span><br><span class="line">    template: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.h; <span class="comment">/* Here access to the data of the test component */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Define a component called test-2 */</span></span><br><span class="line">Ale(<span class="string">"test-2"</span>, &#123;</span><br><span class="line">    imports: [<span class="string">"test-1"</span>],</span><br><span class="line">    template: <span class="string">"&lt;test-1/&gt; "</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Define a component named test and then import test-2 */</span></span><br><span class="line">Ale(<span class="string">"test"</span>, &#123;</span><br><span class="line">    imports: [<span class="string">"test-2"</span>],</span><br><span class="line">    template: <span class="string">"&lt;test-2/&gt;World"</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        h: <span class="string">"Hello"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p class="demo" id="app3"></p><script src="../../../../js/Ale.min.js"></script><script>Ale("test-1", {    template: "Hello"})Ale("test", {    imports: ["test-1"],    template: "<test-1/>World"})Ale.render("test", {    el: "#app"})Ale("test-2", {    imports: ["test-1"],    template: "<test-1/> "})Ale("test-3", {    imports: ["test-2"],    template: "<test-2/>World"})Ale.render("test-3", {    el: "#app2"})Ale("test-4", {    template: function(){        return this.h;    }})Ale("test-5", {    imports: ["test-4"],    template: "<test-4/> "})Ale("test-6", {    imports: ["test-5"],    template: "<test-5/>World",    data: {        h: "Hello"    }})Ale.render("test-6", {    el: "#app3"})</script>]]></content>
      
      
      <categories>
          
          <category> v1 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Method</title>
      <link href="/guide/v1/ComponentMethod/"/>
      <url>/guide/v1/ComponentMethod/</url>
      
        <content type="html"><![CDATA[<h1 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h1><h3 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h3><p>Letâ€™s follow the tutorial for the component <a href="/guide/v1/ComponentLife/">lifecycle</a>, still example of the timer:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Ale(<span class="string">"timer"</span>, &#123;</span><br><span class="line">    template: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&lt;span&gt;Now Time: &lt;/span&gt;"</span> + <span class="keyword">this</span>.time</span><br><span class="line">    &#125;,</span><br><span class="line">    data: &#123;</span><br><span class="line">        time: <span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleTimeString()</span><br><span class="line">    &#125;,</span><br><span class="line">    life: &#123;</span><br><span class="line">        mounting: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="comment">/* Need to use the arrow function here, because this will not be bound */</span></span><br><span class="line">            <span class="keyword">this</span>.timer = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.data.time = <span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleTimeString();</span><br><span class="line">            &#125;, <span class="number">1000</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        unmounting: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            clearInterval(<span class="keyword">this</span>.timer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Ale.render(<span class="string">"timer"</span>, &#123;</span><br><span class="line">    el: <span class="string">"#app"</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p></p><p class="demo" id="app">&lt;/p</p><p>I donâ€™t know if you noticed that our timer is added directly to <code>this</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Note here, directly bound to the Ale component object (this) */</span></span><br><span class="line"><span class="keyword">this</span>.timer = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.data.time = <span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleTimeString();</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p>However, if we are not careful, the added function has the same name as the built-in function in <code>Ale Component Object</code>, then there will be some unknown bugs.</p><p>At this point, we recommend that you add the function to the built-in property <code>methods</code> in the <code>Ale component object</code>!</p><p>Letâ€™s modify the code:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Ale(<span class="string">"timer"</span>, &#123;</span><br><span class="line">    template: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&lt;span&gt;Now Time: &lt;/span&gt;"</span> + <span class="keyword">this</span>.time</span><br><span class="line">    &#125;,</span><br><span class="line">    data: &#123;</span><br><span class="line">        time: <span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleTimeString()</span><br><span class="line">    &#125;,</span><br><span class="line">    life: &#123;</span><br><span class="line">        mounting: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="comment">/* Note here, binding methods on */</span></span><br><span class="line">            <span class="keyword">this</span>.methods.timer = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.data.time = <span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleTimeString();</span><br><span class="line">            &#125;, <span class="number">1000</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        unmounting: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            clearInterval(<span class="keyword">this</span>.methods.timer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The instance is executable normally.</p><p>At the same time, you can also set <code>methods</code> when the component is defined:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Ale(<span class="string">"test"</span>, &#123;</span><br><span class="line">    template: <span class="string">"test"</span>,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        <span class="comment">/* Define a function called testFn */</span></span><br><span class="line">        testFn: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            alert(<span class="string">"test!"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    life: &#123;</span><br><span class="line">        mounting: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="comment">/* Call it dynamically */</span></span><br><span class="line">            <span class="keyword">this</span>.methods.testFn();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Advanced"><a href="#Advanced" class="headerlink" title="Advanced"></a>Advanced</h3><p>Like the <code>data</code> property, the <code>methods</code> property is automatically bound to all elements and child elements of the component, accessible via <code>this.methods</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">template: <span class="string">"&lt;span onclick='this.methods.testFn()'&gt;Click me!&lt;/span&gt;"</span></span><br></pre></td></tr></table></figure><div class="demo" id="app2"></div><script src="../../../../js/Ale.min.js"></script><script>Ale("timer", {    template: function(){        return "<span>Now Time: </span>" + this.time    },    data: {        time: new Date().toLocaleTimeString()    },    life: {        mounting: function(){            this.timer = setInterval(() => {                this.data.time = new Date().toLocaleTimeString();            }, 1000);        },        unmounting: function(){            clearInterval(this.timer);        }    }})Ale.render("timer", {    el: "#app"})Ale("test", {    template: "<span onclick='this.methods.testFn()'>Click me!</span>",    methods: {        testFn: function(){            alert("test!")        }    }})Ale.render("test", {    el: "#app2"})</script>]]></content>
      
      
      <categories>
          
          <category> v1 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>In-depth responsive principle</title>
      <link href="/guide/v1/deepInRespond/"/>
      <url>/guide/v1/deepInRespond/</url>
      
        <content type="html"><![CDATA[<h1 id="In-depth-responsive-principle"><a href="#In-depth-responsive-principle" class="headerlink" title="In-depth responsive principle"></a>In-depth responsive principle</h1><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>Ale adds setters and getters to objects using ES5â€™s new <code>defineProperty</code> property. At the same time Object.defineProperty is a feature in ES5 that cannot be shim, not syntactic sugar, which is why Ale does not support IE8 and lower browsers.</p><h3 id="Limit"><a href="#Limit" class="headerlink" title="Limit"></a>Limit</h3><p>Affected by modern JavaScript (and <code>Object.observe</code> has also been deprecated), Ale <strong>cannot detect the addition or deletion of object properties</strong>. Since Ale will perform a getter/setter conversion procedure on the property when it initializes the instance, the property must exist on the data object in order for Ale to convert it so that it is responsive. E.g:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">    a: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data.a = <span class="number">2</span>; <span class="comment">/* Responsive */</span></span><br><span class="line"></span><br><span class="line">data.b = <span class="number">2</span>; <span class="comment">/* Non-responsive */</span></span><br></pre></td></tr></table></figure><p>So when you set the data, <strong>Required</strong> sets the value that needs to have responsive effect data, even if itâ€™s just a null value:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="string">''</span> <span class="comment">/* Need to be set to empty here */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Specific"><a href="#Specific" class="headerlink" title="Specific"></a>Specific</h3><p>When you trigger the setter (when the operation data is updated), Ale first updates the data, then calculates the updated attribute results and updates them in a loop.</p><p><br></p><p>Among them, the <code>template</code> attribute is special. When the data update is completed, Ale will call the function of <code>diff</code> algorithm and generate a <code>pseudo DOM structure</code>. Aleâ€™s diff algorithm will compare <code>pseudo DOM structure</code> and <code>reality. The difference between DOM structure</code> and only update DOM elements with differences.</p><p><br></p><p>In addition, the diff comparison will only be done in the peer DOM. Once a level change occurs, Ale will not continue to compare, but update the entire layer directly. This can effectively increase the contrast performance of diff and reduce the time of comparison.</p><p><br></p><p>Another point is that Aleâ€™s <code>diff</code> algorithm only compares whether the elementâ€™s <code>content</code> \ <code>id</code> \ <code>class</code> \ <code>name</code> attribute is the same, that is, when you dynamically update for example <code>onclick</code> The properties of the class, the <code>diff</code> algorithm does not compare the differences, and the elements are not updated. At this point you can manually turn off the <code>diff</code> algorithm when the element is updated and open it when the element update is complete!</p>]]></content>
      
      
      <categories>
          
          <category> v1 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Life</title>
      <link href="/guide/v1/ComponentLife/"/>
      <url>/guide/v1/ComponentLife/</url>
      
        <content type="html"><![CDATA[<h1 id="Life"><a href="#Life" class="headerlink" title="Life"></a>Life</h1><h3 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h3><p>In Ale, a component has six life states, which correspond to their life cycle functions of the same name:</p><ul><li>using (when the component is used)</li><li>mounting (when the component is inserted into the real DOM)</li><li>unmounting (when the component moves out of the real DOM)</li><li>rendering (when the component is rendered)</li><li>updating (when the component is updated)</li><li>destroy (when the component is destroyed)</li></ul><p>You can add a property called <code>life</code> when defining a component and add a function to the <code>life</code> property:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Ale(<span class="string">"test"</span>, &#123;</span><br><span class="line">    template: <span class="string">"test"</span>,</span><br><span class="line">    life: &#123;</span><br><span class="line">        <span class="comment">/* Add the life attribute here, you need to be the object */</span></span><br><span class="line">        <span class="comment">/* Add a using function that fires when the component is used */</span></span><br><span class="line">        using: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            alert(<span class="string">"using!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p class="demo" id="app"><button onclick="Ale.render('test',{el: '#app'})">Point me to render the test component</button></p><h3 id="Advanced"><a href="#Advanced" class="headerlink" title="Advanced"></a>Advanced</h3><p>In addition to the using function, other functions will automatically bind the Ale component object. If you need to change the data, use the form <code>this.data</code> to change:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Ale(<span class="string">"test"</span>, &#123;</span><br><span class="line">    template: <span class="string">"test"</span>,</span><br><span class="line">    life: &#123;</span><br><span class="line">        <span class="comment">/* Add the life attribute here, you need to be the object */</span></span><br><span class="line">        <span class="comment">/* Add a rendering function that fires when the component is rendered */</span></span><br><span class="line">        rendering: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.data); <span class="comment">/* print data */</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Online-instance"><a href="#Online-instance" class="headerlink" title="Online instance"></a>Online instance</h3><p>Letâ€™s make a timer that outputs the current time, updated every second:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Ale(<span class="string">"timer"</span>, &#123;</span><br><span class="line">    template: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Now Time: "</span> + <span class="keyword">this</span>.time</span><br><span class="line">    &#125;,</span><br><span class="line">    data: &#123;</span><br><span class="line">        time: <span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleTimeString()</span><br><span class="line">    &#125;,</span><br><span class="line">    life: &#123;</span><br><span class="line">        mounting: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="comment">/* Need to use the arrow function here, because this will not be bound */</span></span><br><span class="line">            <span class="keyword">this</span>.timer = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.data.time = <span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleTimeString();</span><br><span class="line">            &#125;, <span class="number">1000</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        unmounting: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            clearInterval(<span class="keyword">this</span>.timer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Ale.render(<span class="string">"timer"</span>, &#123;</span><br><span class="line">    el: <span class="string">"#app"</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p class="demo" id="app2"></p><p>The upper timer does not apply Aleâ€™s built-in <code>diff</code> algorithm because you need to wrap elements that donâ€™t need to be updated with DOM tags:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">template: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"&lt;span&gt;Now Time: &lt;/span&gt;"</span> + <span class="keyword">this</span>.time</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p class="demo" id="app3"></p><p>Now you can open the console and compare the refresh of the two instance DOMs. You will find that the <code>Now Time:</code> of this instance is not updated.</p><script src="../../../../js/Ale.min.js"></script><script>Ale("test", {    template: "test",    life: {        using: function(){            alert("using!");        }    }})Ale("timer", {    template: function(){        return "Now Time: " + this.time    },    data: {        time: new Date().toLocaleTimeString()    },    life: {        mounting: function(){            this.timer = setInterval(() => {                this.data.time = new Date().toLocaleTimeString();            }, 1000);        },        unmounting: function(){            clearInterval(this.timer);        }    }})Ale.render("timer", {    el: "#app2"})Ale("timer2", {    template: function(){        return "<span>Now Time: </span>" + this.time    },    data: {        time: new Date().toLocaleTimeString()    },    life: {        mounting: function(){            this.timer = setInterval(() => {                this.data.time = new Date().toLocaleTimeString();            }, 1000);        },        unmounting: function(){            clearInterval(this.timer);        }    }})Ale.render("timer2", {    el: "#app3"})</script>]]></content>
      
      
      <categories>
          
          <category> v1 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Data</title>
      <link href="/guide/v1/ComponentData/"/>
      <url>/guide/v1/ComponentData/</url>
      
        <content type="html"><![CDATA[<h1 id="Data"><a href="#Data" class="headerlink" title="Data"></a>Data</h1><h3 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h3><p>In the <a href="/guide/v1/ComponentFoundation/">Component Basics</a> article, I believe you have already learned some basic ways to add data. If you havenâ€™t studied this tutorial yet, please come back after learning!</p><p>In the component-based tutorial, you only learned how to add <code>data</code>. So why add dynamic <code>data</code>?</p><p><br></p><p>Itâ€™s actually very simple, because the template is static and the data is dynamic. If we change somewhere, itâ€™s actually much simpler than changing the template!</p><p>For example, we first define a component named <code>com1</code> and then render it:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Ale(<span class="string">"com1"</span>, &#123;</span><br><span class="line">    template: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello "</span> + <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;,</span><br><span class="line">    data: &#123;</span><br><span class="line">        name: <span class="string">"World"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Ale.render(<span class="string">"com1"</span>, &#123;</span><br><span class="line">    el: <span class="string">"#app"</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The rendering results are as follows:</p><p id="app" class="demo"></p><p>So since we know that we can modify the data dynamically, how can we modify it?</p><p><br></p><p>Quite simply, we just need to store the result returned by the <code>Ale.render</code> function (which is actually the Ale component object) into a variable:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = Ale.render(<span class="string">"com1"</span>, &#123;</span><br><span class="line">    el: <span class="string">"#app"</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Then use this variable to manipulate <code>data</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.data.name = <span class="string">"Ale.js"</span>; <span class="comment">/* Reassign */</span></span><br></pre></td></tr></table></figure><p>Now letâ€™s type <code>app.data.name = &quot;Ale.js&quot;</code> in the console, and youâ€™ll see the following instance dynamic update:</p><p id="app2" class="demo"></p><p>At the same time, our data will be automatically bound to all elements within the component, accessible using <code>this.data</code>, for example, we will be a component that records clicks:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Defining components */</span></span><br><span class="line">Ale(<span class="string">"counter"</span>, &#123;</span><br><span class="line">    template: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">/* Let this.data.count increase itself */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&lt;button onclick='this.data.count++'&gt;You clicked me "</span> + <span class="keyword">this</span>.count + <span class="string">" times."</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    data: &#123;</span><br><span class="line">        count: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Rendering component */</span></span><br><span class="line">Ale.render(<span class="string">"counter"</span>, &#123;</span><br><span class="line">    el: <span class="string">"#app"</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p class="demo" id="app3"></p><p>In fact, the data can be applied not only to the template, but also to the properties of any supported function. Of course, the properties of these bound data will be updated whenever you update the data.</p><p>What are the specific properties that can be applied to the data, please continue to view the tutorial!</p><h3 id="advanced"><a href="#advanced" class="headerlink" title="advanced"></a>advanced</h3><p>If you know Vue, you will find that using Vue to set the data requires adding a function and then using return to return the required data:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="comment">/* Add data here */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Vue does this because each time the JavaScript engine copies an object, it is copied along with the objectâ€™s memory address, which causes another object to be updated when an object is updated. At this time, if we use a function to return an object each time, it is equivalent to creating a new object with a different memory address each time, there will be no such problem.</p><p><br></p><p>However, doing so will result in an increase in the amount of code you need to write, while Ale uses a deep copy to scan from the root of the object and create a brand new object layer by layer. Doing so will cause a certain performance penalty (ignoring small amounts of data), but it also reduces the amount of code you need to write.</p><p><br></p><p>If you need multiple components to share a set of data, try having one component render multiple elements at the same time in one rendering, or use <a href="/guide/v1/ComponentImport">composite component</a>.</p><script src="../../../../js/Ale.min.js"></script><script>Ale("com1", {    template: function(){        return "Hello " + this.name;    },    data: {        name: "World"    }})Ale.render("com1", {    el: "#app"})var app = Ale.render("com1", {    el: "#app2"})Ale("counter", {    template: function(){        return "<button onclick='this.data.count++'>You clicked me " + this.count + " times.";    },    data: {        count: 0    }})Ale.render("counter", {    el: "#app3"})</script>]]></content>
      
      
      <categories>
          
          <category> v1 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Plugin</title>
      <link href="/guide/v1/plugin/"/>
      <url>/guide/v1/plugin/</url>
      
        <content type="html"><![CDATA[<h1 id="Plugin"><a href="#Plugin" class="headerlink" title="Plugin"></a>Plugin</h1><h3 id="Using-plugins"><a href="#Using-plugins" class="headerlink" title="Using plugins"></a>Using plugins</h3><p>We need to load a plugin using the <code>Ale.use</code> function:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ale.use();</span><br></pre></td></tr></table></figure><p>The <code>Ale.use</code> function takes a parameter to specify the Ale plugin object to load. For example, we pass in an Ale plugin object named <code>test</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ale.use(test);</span><br></pre></td></tr></table></figure><p><code>test</code> is actually a variable. In the following sections, we will learn how to make an Ale plugin object.</p><h3 id="Making-a-plugin"><a href="#Making-a-plugin" class="headerlink" title="Making a plugin"></a>Making a plugin</h3><p>First let us define an <code>object</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Define a variable called test */</span></span><br><span class="line"><span class="keyword">var</span> test = &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If you want <code>test</code> to be an Ale plugin object, then it must have at least the <code>name</code> and <code>install</code> attributes:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test = &#123;</span><br><span class="line">    name: <span class="string">"test"</span>, <span class="comment">/* Plugin name */</span></span><br><span class="line">    install: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">/* Install function, which is called when the user uses the plugin */</span></span><br><span class="line">        alert(<span class="string">"Hello!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You can add functions or properties to the <code>letotype</code> property of the Ale object in the <code>install</code> propertyâ€¦</p><p>Anyway, the installer supports arbitrary JavaScript code!</p><h3 id="Online-instance"><a href="#Online-instance" class="headerlink" title="Online instance"></a>Online instance</h3><p>We have defined an Ale plugin object called <code>test</code>, now letâ€™s install it by typing <code>Ale.use(test)</code> in the console! (Hello will be output during installation!)</p><script src="../../../../js/Ale.min.js"></script><script>var test = {    name: "test",    install: function(){        alert("Hello!");    }}</script>]]></content>
      
      
      <categories>
          
          <category> v1 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Version</title>
      <link href="/guide/v1/version/"/>
      <url>/guide/v1/version/</url>
      
        <content type="html"><![CDATA[<h1 id="Version"><a href="#Version" class="headerlink" title="Version"></a>Version</h1><h3 id="version-attribute"><a href="#version-attribute" class="headerlink" title="version attribute"></a>version attribute</h3><p>You can get the current version information of Ale in the following way:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ale.version</span><br></pre></td></tr></table></figure><p>The current version of Ale included in the official website is:</p><p class="demo" id="app"></p><script src="../../../../js/Ale.min.js"></script><script>Ale("com1", {    template: function(){        return this.version;    }});Ale.render("com1", {    el: "#app",    data: {        version: Ale.version    }})</script>]]></content>
      
      
      <categories>
          
          <category> v1 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Filter</title>
      <link href="/guide/v1/filter/"/>
      <url>/guide/v1/filter/</url>
      
        <content type="html"><![CDATA[<h1 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h1><h3 id="filter-function"><a href="#filter-function" class="headerlink" title="filter function"></a>filter function</h3><p>The Ale function has a built-in <code>Ale.filter</code> function that filters sensitive information every time a DOM update is made.</p><p>In Ale, the filter is a queue. Each time you call the <code>Ale.filter</code> function, the filter function is automatically inserted into the queue. You can add filters this way:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* The filter function takes a parameter and you can pass in a function. But this function must have a parameter, and then return the filtered result with return */</span></span><br><span class="line">Ale.filter(<span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Filter all numbers 1 */</span></span><br><span class="line">    msg = msg.replace(<span class="regexp">/1/g</span>, <span class="string">""</span>)</span><br><span class="line">    <span class="keyword">return</span> msg;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Or you can pass in an array */</span></span><br><span class="line">Ale.filter([<span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Filter all numbers 1 */</span></span><br><span class="line">    msg = msg.replace(<span class="regexp">/1/g</span>, <span class="string">""</span>)</span><br><span class="line">    <span class="keyword">return</span> msg;</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Filter all numbers 2 */</span></span><br><span class="line">    msg = msg.replace(<span class="regexp">/2/g</span>, <span class="string">""</span>)</span><br><span class="line">    <span class="keyword">return</span> msg;</span><br><span class="line">&#125;])</span><br></pre></td></tr></table></figure><h3 id="Online-instance"><a href="#Online-instance" class="headerlink" title="Online instance"></a>Online instance</h3><p id="app" class="demo"></p><p>In the above example, we added a global filter that filters out all the numbers. Now you can type <code>app.data.str = &quot;new message123&quot;</code> in the console to see what the filter does.</p><script src="../../../../js/Ale.min.js"></script><script>Ale.filter(function(msg){    return msg.replace(/0/g, "").replace(/1/g, "").replace(/2/g, "").replace(/3/g, "").replace(/4/g, "").replace(/5/g, "").replace(/6/g, "").replace(/7/g, "").replace(/8/g, "").replace(/9/g, "");})Ale("com1", {    template: function(){        return this.str;    }});var app = Ale.render("com1", {    el: "#app",    data: {        str: "Hello World"    }})</script>]]></content>
      
      
      <categories>
          
          <category> v1 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Config</title>
      <link href="/guide/v1/config/"/>
      <url>/guide/v1/config/</url>
      
        <content type="html"><![CDATA[<h1 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h1><h3 id="config-function"><a href="#config-function" class="headerlink" title="config function"></a>config function</h3><p>The Ale function has a built-in <code>Ale.config</code> function to change some Ale configuration information. The configuration supported by the current config function is as follows:</p><ul><li>html <strong>(default false)</strong> [data if the HTML tag output is a node (turn off this option to prevent xss attacks, do not open easily)]</li><li>diff <strong>(default true)</strong> [Whether the diff algorithm is applied when operating the DOM (recommended applet is closed, medium and large applications need to be turned on)]</li></ul><p>You can change one of the configurations by:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Ale.config(<span class="string">"html"</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Or */</span></span><br><span class="line"></span><br><span class="line">Ale.config(&#123;</span><br><span class="line">    html: <span class="literal">true</span>,</span><br><span class="line">    diff: <span class="literal">false</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> v1 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Component Foundation</title>
      <link href="/guide/v1/ComponentFoundation/"/>
      <url>/guide/v1/ComponentFoundation/</url>
      
        <content type="html"><![CDATA[<h1 id="Component-Foundation"><a href="#Component-Foundation" class="headerlink" title="Component Foundation"></a>Component Foundation</h1><h3 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h3><p>In the introductory chapter, youâ€™ve learned some basic definitions and functions for rendering components. These foundations will not appear in this chapter. If you have not already studied some of the content, please visit the <a href="/guide/v1/Introduction/">Introduction</a> page.</p><h3 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h3><p>On the introduction page, we have some knowledge of the <strong>template</strong> property:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Define a component called com1</span></span><br><span class="line">Ale(<span class="string">"com1"</span>, &#123;</span><br><span class="line">    template: <span class="string">"HelloWorld"</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>In fact, the <strong>template</strong> property also supports receiving a function, but the specific template needs to be returned using <code>return</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Define a component called com1</span></span><br><span class="line">Ale(<span class="string">"com1"</span>, &#123;</span><br><span class="line">    template: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"HelloWorld"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Of course, you can also use ES6 syntax to define templates.</span></span><br><span class="line">Ale(<span class="string">"com1"</span>, &#123;</span><br><span class="line">    template()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"HelloWorld"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Then we need to render this component:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Ale.render(<span class="string">"com1"</span>, &#123;</span><br><span class="line">    el: <span class="string">"#app"</span> <span class="comment">/* Target element selector */</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p class="demo" id="app"></p><p>So, what are the benefits of setting the <strong>template</strong> property to a function? In fact, it can automatically bind a property called <code>data</code>.</p><p>For example, we define a value named <code>name</code> in the <code>data</code> attribute and then render it:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Ale(<span class="string">"com1"</span>, &#123;</span><br><span class="line">    template: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello "</span> + <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;,</span><br><span class="line">    data: &#123;</span><br><span class="line">        name: <span class="string">"World"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Remember to use the ES6 arrow function, because the arrow function does not bind this</span></span><br><span class="line"><span class="comment">Ale("com1", &#123;</span></span><br><span class="line"><span class="comment">    template: () =&gt; &#123;</span></span><br><span class="line"><span class="comment">        return "Hello " + this.name; //Error!</span></span><br><span class="line"><span class="comment">    &#125;,</span></span><br><span class="line"><span class="comment">    data: &#123;</span></span><br><span class="line"><span class="comment">        name: "World"</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;);</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p class="demo" id="app2"></p><h3 id="Advanced-operation"><a href="#Advanced-operation" class="headerlink" title="Advanced operation"></a>Advanced operation</h3><p>You can also dynamically set <code>data</code> when the component is rendered. Among them, the attribute with the same name will be reassigned:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Ale.render(<span class="string">"com1"</span>, &#123;</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        name: <span class="string">"Ale.js"</span> <span class="comment">/* Will be reassigned to Ale.js */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p class="demo" id="app3"></p><p>Of course, the same component can also be rendered multiple times:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Ale.render(<span class="string">"com1"</span>, &#123;</span><br><span class="line">    el: <span class="string">"#app"</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Ale.render(<span class="string">"com1"</span>, &#123;</span><br><span class="line">    el: <span class="string">"#app2"</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Ale.render(<span class="string">"com1"</span>, &#123;</span><br><span class="line">    el: <span class="string">"#app3"</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        name: <span class="string">"Ale.js"</span> <span class="comment">/* Can also have different properties */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><script src="../../../../js/Ale.min.js"></script><script>Ale("com1", {    template: function(){        return "HelloWorld";    }});Ale.render("com1", {    el: "#app"})Ale("com2", {    template: function(){        return "Hello "+this.name;    },    data: {        name: "World"    }});Ale.render("com2", {    el: "#app2"})Ale.render("com2", {    el: "#app3",    data: {        name: "Ale.js"    }})</script>]]></content>
      
      
      <categories>
          
          <category> v1 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Install</title>
      <link href="/guide/v1/Install/"/>
      <url>/guide/v1/Install/</url>
      
        <content type="html"><![CDATA[<h1 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h1><h4 id="Compatibility"><a href="#Compatibility" class="headerlink" title="Compatibility"></a>Compatibility</h4><p>Ale does not support IE8 and below because Ale uses ECMAScript 5 features that IE8 cannot simulate. But it supports all ECMAScript 5 compliant browsers.</p><h4 id="Update-log"><a href="#Update-log" class="headerlink" title="Update log"></a>Update log</h4><p>Latest stable version: <strong>1.0-Beta.1</strong></p><p>See the <a href="https://github.com/Ale-js/ale/releases" target="_blank" rel="noopener">GitHub</a> for the update log for each version.</p><h3 id="Directly-introduced-with-lt-script-gt"><a href="#Directly-introduced-with-lt-script-gt" class="headerlink" title="Directly introduced with &lt;script&gt;"></a>Directly introduced with &lt;script&gt;</h3><p>Directly downloaded and introduced with the <code>&lt;script&gt;</code> tag, <code>Ale</code> will be registered as a global variable.</p><p></p><p class="info-box">Do not use uncompressed <code>ale.js</code> files in production versions, otherwise this will slow down your file loading! </p><p></p><p><a href="https://github.com/Ale-js/ale/tree/master/dist" target="_blank" rel="noopener"><button class="post-btn" style="margin-bottom: 15px">development version</button></a><br><a href="https://github.com/Ale-js/ale/releases" target="_blank" rel="noopener"><button class="post-btn">Production version</button></a></p><h4 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h4><p>We recommend linking to a specific version number that you can manually update:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/alejs@1.0.0-beta.1/ale.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Please confirm to understand the different builds and use the production environment version in your published site, replacing <code>ale.js</code> with <code>ale.min.js</code>.</p><h3 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h3><p>NPM installation is recommended when building large applications with Ale, because NPM works well with module wrappers such as webpack or browserify.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> Latest stable version</span><br><span class="line"><span class="meta">$</span> npm i alejs</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> v1 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Compare other frameworks</title>
      <link href="/guide/v1/Comparison/"/>
      <url>/guide/v1/Comparison/</url>
      
        <content type="html"><![CDATA[<h1 id="Compare-other-frameworks"><a href="#Compare-other-frameworks" class="headerlink" title="Compare other frameworks"></a>Compare other frameworks</h1><p>Welcome to this page, we believe that the purpose of coming here is to understand the difference between Ale and other large frameworks, which is exactly what we want to answer here.</p><p>Objectively speaking, as the core developer of Ale, we will definitely prefer Ale, and think it would be better to solve it with Ale for some problems. But here, we want to describe everything as fair and accurate as possible. Other frameworks have significant advantages, such as Reactâ€™s vast ecosystem, or like Angular and Vue, which have numerous solutions for large projects. We will try to list all of them.</p><p><br></p><p>We also want to get help from <strong>You</strong> to keep the documentation up to date, because the world of JavaScript is progressing too fast. If you notice an inaccurate or seemingly incorrect place, please submit a question for let us know.</p><p><br></p><h3 id="React"><a href="#React" class="headerlink" title="React"></a>React</h3><p>React and Ale are almost identical. In fact, React is the inspiration for the early Ale, they all have:</p><ul><li>Update only the necessary [use <strong>diff</strong> algorithm] when status (data) is updated</li><li>Provides view components for <strong>responsive</strong> and <strong>componentized</strong>.</li><li>Focus on the core library and pass other functions to the relevant libraries.</li></ul><p>Because there are many similarities, we will spend more time comparing them in this block. Here we not only guarantee the accuracy of the technical content, but also take into account the balance considerations. We need to recognize where React is better than Ale, such as a richer ecosystem.</p><h4 id="Performance"><a href="#Performance" class="headerlink" title="Performance"></a>Performance</h4><p>Here we only tested for <strong>component definition</strong> and <strong>component rendering</strong>, so the test results do not represent full performance. But what is certain is that Ale outperforms React in both respects: (defining a component and rendering 1000 elements)</p><ul><li>Ale: 46~52 (ms)</li><li>React: 307~336 (ms)</li></ul><p>Of course, we also did a test on responsive dynamic rendering, which showed that Ale performed dynamic rendering 2.5 times faster than React.</p><p>The reason for the slowness of React may be due to the fact that we use <code>Babel</code> for dynamic rendering. But donâ€™t forget, Ale doesnâ€™t need to compile. If you compile React ahead of time, this will be unfair to Ale.</p><h4 id="HTML-amp-CSS"><a href="#HTML-amp-CSS" class="headerlink" title="HTML &amp; CSS"></a>HTML &amp; CSS</h4><p>In React, everything is JavaScript. Not only can HTML be expressed in JSX, but the trend is now increasingly incorporating CSS into JavaScript. This type of approach has its advantages, but there are some trade-offs that are not acceptable to every developer.</p><p>Aleâ€™s overall idea is to embrace and extend the classic Web technologies. We will analyze it in detail below.</p><h5 id="JSX-vs-Templates"><a href="#JSX-vs-Templates" class="headerlink" title="JSX vs Templates"></a>JSX vs Templates</h5><p>In React, the rendering capabilities of all components rely on JSX. JSX is a syntactic sugar for writing JavaScript using XML syntax.</p><p>Using JSX has the following advantages:</p><ul><li>You can build your view page using the full programming language JavaScript functionality. For example, you can use temporary variables, JSâ€™s own flow control, and directly reference the values â€‹â€‹in the current JS scope.</li><li>Development tools support JSX is more advanced than other available Ale templates (eg, linting, type checking, editor auto-completion).</li></ul><p>But in fact, Ale also provides rendering functions, and even Ale abandons the traditional Mustache (JSX) template and chooses a less popular rendering function, which includes the following aspects:</p><ul><li>Depends on JavaScriptâ€™s own complete compiler, so we no longer need to manually write the template rendering function, which can effectively improve the overall speed of Ale template compilation, because the rendering function is closer to the JavaScript compiler itself than the template engine.</li><li>When you add a JavaScript expression to a JSX template, some compilers donâ€™t have a corresponding syntax hint. At the same time, in some scenarios, you really need the ability to fully program JavaScript.</li></ul><h4 id="Scale"><a href="#Scale" class="headerlink" title="Scale"></a>Scale</h4><h5 id="Expanding-up"><a href="#Expanding-up" class="headerlink" title="Expanding up"></a>Expanding up</h5><p>Well, to be honest, Ale is really not designed for large applications. We designed it to be able to handle almost all small and medium-sized applications.</p><p>In contrast, React provides powerful routing for large applications. And the React community is very innovative in terms of state management (such as Flux, Redux), which Ale canâ€™t match.</p><h5 id="Downward-expansion"><a href="#Downward-expansion" class="headerlink" title="Downward expansion"></a>Downward expansion</h5><p>The React learning curve is steep, and you need to know JSX and ES2015 before you start learning React, because many examples use these syntaxes. You need to learn to build the system, although you can technically compile the code in real time with Babel, but this is not recommended for production environments.</p><p>However, Ale expands down to be very similar to jQuery. Because you just have to put the following tags on the page to run:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"ale.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Then you can write the Ale code and apply it to production. You just need to replace it with the min version of the Ale file without worrying about other performance issues.</p><p>Since Aleâ€™s start-up phase doesnâ€™t require any complex knowledge points, such as ES2015 and JSX, developers can build simple applications in less than half an hour by reading the guide.</p><h4 id="Native-rendering"><a href="#Native-rendering" class="headerlink" title="Native rendering"></a>Native rendering</h4><p>React Native enables you to write native rendering capabilities for apps (iOS and Android) using the same component model. Being able to develop across multiple platforms at the same time is great for developers. In contrast, Ale is a bit weaker in this regard. But we didnâ€™t stop here. As Ale slowly develops, these build systems will be released accordingly, so stay tuned.</p><h4 id="Volume"><a href="#Volume" class="headerlink" title="Volume"></a>Volume</h4><p>Compared to React, Ale is extremely lightweight. Aleâ€™s compressed files (not g-zip) [including APIs for manipulating DOM] are only about <strong>8kb</strong> size, while Reactâ€™s core library plus DOM library is amazing<em> </em>108kb**.</p><h4 id="Preact-and-other-classes-React-library"><a href="#Preact-and-other-classes-React-library" class="headerlink" title="Preact and other classes React library"></a>Preact and other classes React library</h4><p>The libraries of the class React often share API and ecology with React as much as possible. Therefore the above comparison is equally applicable to them. They differ from React in that they have a smaller ecology and higher performance. However, because these libraries are not 100% compatible with all of the React ecosystem, some tools and auxiliary libraries may not be available. Or even if it seems to work, there may be incompatibility at any time, unless the React library you use is officially consistent with React.</p><h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><p>It is time to compare the most important frameworks. Earlier we said that React was the inspiration for early Ale. In fact, Aleâ€™s more inspiration comes from Vue, which is why some of the features and APIs provided by Ale are very similar to Vue.</p><p>However, although Ale and Vue have similarities in some places, we recommend that you install both Ale and Vue, because Vue can make Aleâ€™s development more efficient. But if you donâ€™t want to do this, you can just install a framework.</p><h4 id="Complexity"><a href="#Complexity" class="headerlink" title="Complexity"></a>Complexity</h4><p>Ale.js is much simpler than Vue in both API and design, and is more suitable for beginners to learn, so you can quickly master all of its features and invest in development.</p><h4 id="Flexibility-and-componentization"><a href="#Flexibility-and-componentization" class="headerlink" title="Flexibility and componentization"></a>Flexibility and componentization</h4><p>Compared to Angular, Vue.js is a more flexible and open solution. But in Ale, this situation will change.</p><p>In fact, Vue enforces one-way data flow between different components, which makes the data flow in the application clearer and easier to understand, but it also limits the flexibility between components. In Ale, there are only composite components, and there are no parent and child components, and any component in the composite component can interoperate because they share a set of data.</p><h4 id="Performance-1"><a href="#Performance-1" class="headerlink" title="Performance"></a>Performance</h4><p>Here we are the same as React, and only tested for <strong>component definition</strong> and <strong>component rendering</strong>, so the test results do not represent the performance of all operations. But what is certain is that Ale outperforms Vue in both respects: (defining a component and rendering 1000 elements)</p><ul><li>Ale: 46~52 (ms)</li><li>Vue: 181~228 (ms)</li></ul><h4 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h4><p>Vue provides an official type declaration and component decorator for TS, but not everyone wants to use TS. In small and medium-sized projects, the introduction of TS may not bring much obvious advantages. In these cases, using Ale would be a better choice.</p><h4 id="Volume-1"><a href="#Volume-1" class="headerlink" title="Volume"></a>Volume</h4><p>The separate vue.min.js file has a size of <strong>88kb</strong>, while Ale has a size of only about <strong>8kb</strong>, which is relatively lightweight compared to Vue.</p><h4 id="learning-curve"><a href="#learning-curve" class="headerlink" title="learning curve"></a>learning curve</h4><p>In this regard, both frameworks are similar, except that you need to have a good HTML and JavaScript foundation. With these basic skills, you can invest in development very quickly through the reading guide.</p><p>But specifically, Vueâ€™s API area is much larger than Ale, so you need to understand more concepts to get productive. Of course, the complexity of Vue itself is because it is designed to target large, complex applications. But it is undeniable that this also makes it quite unfriendly to developers who are not experienced enough.</p><h3 id="Angular"><a href="#Angular" class="headerlink" title="Angular"></a>Angular</h3><p>Of course, the editors donâ€™t know much about Angular, so they donâ€™t make a good comparison. Here, we hope that more experienced developers can help us write articles comparing Angular. You can click on the <strong>Edit page</strong> below, then go to Github to submit, thank you for your support and understanding!</p><h3 id="Supplement"><a href="#Supplement" class="headerlink" title="Supplement"></a>Supplement</h3><p>In fact, there is one more thing to add in terms of performance, because Vue and React use virtual DOM and diff algorithms. Ale actually traverses the real DOM tree directly, and then uses the diff algorithm to compare the differences. This is similar to Angularâ€™s dirty check, and performance is affected. However, this approach also eliminates the need to create a virtual DOM tree.</p>]]></content>
      
      
      <categories>
          
          <category> v1 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Introduction</title>
      <link href="/guide/v1/Introduction/"/>
      <url>/guide/v1/Introduction/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><h2 id="What-is-Ale-js"><a href="#What-is-Ale-js" class="headerlink" title="What is Ale.js?"></a>What is Ale.js?</h2><p>Ale (Chinese: å•¤é…’) is a set of progressive frameworks for building user interfaces in the form of components. It believes that everything is a component. Unlike other large frameworks, Ale only needs you to focus on the data and does not need to care about any content related to the view. When you update the data, any places in the view that use it will be updated.</p><p><br></p><p>We combine some of the features of <code>Vue</code> and <code>React</code> in <code>Ale</code> to make it more convenient and lightweight. At the same time, the <code>diff</code> algorithm is also used in Ale (thanks to Aleâ€™s self-developed diff algorithm, which is only about 50 lines, extremely lightweight).</p><p><br></p><p>At the same time, in Ale, you donâ€™t have to worry about anything about <strong>performance</strong>, because Ale is compressed (non-g-zip) only about 7kb in size, and the execution speed is also close to <strong>3</strong> times that of Vue and React!</p><p><br></p><p>If you are already an experienced front-end developer and want to know the specific differences between Ale and other libraries/frames, check out <a href="/guide/v1/Comparison">Compare other frameworks</a>.</p><h3 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h3><p class="info-box">Our official guide assumes that you already know intermediate knowledge about HTML, CSS, and JavaScript. If you are just starting to learn about front-end development, it may not be the best idea to use the framework as your first step - get the basics and come back! Previous experience with other frameworks will help, but it is not required.<br></p><p>The simplest example of using Ale is to make a <code>HelloWorld</code> page. Letâ€™s create a <code>.html</code> file and then include Ale as follows:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Development environment version --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"ale.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Or:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Production environment version, compressed code --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"ale.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>The installation tutorial gives you more ways to install Ale. If you want to know more about how to install Ale, please visit <a href="/guide/v1/Install">Installation Tutorial</a></p><h3 id="The-first-component"><a href="#The-first-component" class="headerlink" title="The first component"></a>The first component</h3><p>Have you included the Ale core library file? Letâ€™s start making our first component!</p><p>In Ale, all components are created with the <code>Ale</code> function:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ale(); <span class="comment">/* When you included the Ale core library, Ale will be registered as a global function. */</span></span><br></pre></td></tr></table></figure><p>The <code>Ale</code> function receives <code>2</code> arguments, the first argument is used to set the name of the component (string), and the second argument is used to configure some default arguments (objects):</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Define a component called com1 */</span></span><br><span class="line">Ale(<span class="string">"com1"</span>, &#123;</span><br><span class="line">    <span class="comment">/* config */</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Of course, this alone can not create a basic component, a basic component at least to add a parameter called <code>template</code> in the configuration, used to set the template of the component:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Define a component called com1 */</span></span><br><span class="line">Ale(<span class="string">"com1"</span>, &#123;</span><br><span class="line">    <span class="comment">/* The configuration template is HelloWorld. */</span></span><br><span class="line">    template: <span class="string">"HelloWorld"</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>At this point, the most basic components are defined!</p><p>But if we simply define the component without rendering it, then this component will have no effect. At this point we can use the <code>Ale.render</code> function to render a component:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ale.render(); <span class="comment">/* Rendering component function */</span></span><br></pre></td></tr></table></figure><p>The <code>Ale.render</code> function also receives <code>2</code> arguments, just like the <code>Ale</code> function, the first argument is used to set the name of the component (string), and the second argument is used to configure some default arguments (object):</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Ale.render(<span class="string">"com1"</span>, &#123;</span><br><span class="line">    el: <span class="string">"#app"</span> <span class="comment">/* When you render a component, you must add the el attribute to select the element. */</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Where <code>id</code> is the element of <code>app</code>:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Among them, at least one configuration parameter must be added each time the component is rendered, that is - <code>el</code>, used to set the elements that need to be selected. At this point, open our <code>html</code> file and you will see that the component rendering is complete:</p><p class="demo" id="app"></p><h3 id="Are-you-ready"><a href="#Are-you-ready" class="headerlink" title="Are you ready?"></a>Are you ready?</h3><p>Congratulations, now that you have created your first <code>Ale</code> component! And our tutorial is just getting started - the rest of this tutorial will cover more detailed details of other advanced features, so be sure to read the full tutorial!</p><script src="../../../../js/Ale.min.js"></script><script>    Ale("com1", {        template: "HelloWorld"    })    Ale.render("com1", {        el: "#app"    })</script>]]></content>
      
      
      <categories>
          
          <category> v1 </category>
          
      </categories>
      
      
    </entry>
    
  
  
</search>
