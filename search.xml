<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Ale component object</title>
      <link href="/2018/12/05/aleCom-1X/"/>
      <url>/2018/12/05/aleCom-1X/</url>
      
        <content type="html"><![CDATA[<h1 id="Ale-component-object"><a href="#Ale-component-object" class="headerlink" title="Ale component object"></a>Ale component object</h1><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>As you probably know in the previous tutorial, <code>Ale.js</code> returns an <code>Ale component object</code> every time you use the <code>use</code> component, you can define a variable to receive it:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var aleCom = Ale.use(&#123;</span><br><span class="line">    name: &quot;test&quot;,</span><br><span class="line">    el: &quot;#app&quot;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>After that, you can use any of the receive variables to use the operations provided by any <code>Ale component object</code>, for example:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aleCom.nextState();</span><br></pre></td></tr></table></figure><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><p>The following are the operations supported by all <code>Ale component objects</code>:: <strong>(please note that the suffix with the parentheses is a function, the value is not added)</strong></p><ul><li>el [list of elements included in this component]</li><li>template[this component template]</li><li>nowState [current state]</li><li>destroy() [Destroy this Ale component object and destroy all of this component in the real DOM]</li><li>changeState() [Change a state, receive an argument of type object, does not affect nowState]</li><li>nextStates() [to enter the next state]</li><li>backStates() [return to the previous state]</li><li>addStates() [Add one or more states, receive an array]</li><li>removeStates() [delete a state]</li><li>setStates() [Set state, accept an array, will overwrite the current state]</li><li>statesLength() [return all state lengths]</li><li>changeData() [Change one or more data]</li></ul>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Permission</title>
      <link href="/2018/12/04/permissionCom-1X/"/>
      <url>/2018/12/04/permissionCom-1X/</url>
      
        <content type="html"><![CDATA[<h1 id="Permission"><a href="#Permission" class="headerlink" title="Permission"></a>Permission</h1><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>When a component is defined, you can add permissions to the component (using a <code>permissions</code> parameter to add):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Ale.define(&#123;</span><br><span class="line">    name: &quot;test&quot;,</span><br><span class="line">    template: &quot;Try entering aleCom.nextStates() in the console&quot;,</span><br><span class="line">    permissions: &#123;</span><br><span class="line">        nextStates: false</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p id="app" class="demo"><br></p><p>Among them, the <code>permissions</code> parameter requires an <code>Object</code> object, and a <code>Ale component object</code> function faces a Boolean value.</p><p>When the pair value is <code>true</code>, it means that the operation is allowed. When the value is <code>false</code>, the operation is not allowed (all operations default to <code>true</code> permission).</p><p><br></p><p>The following are the function names of all <code>Ale component objects</code> supported by the <code>permissions</code> parameter:</p><ul><li>changeState</li><li>nextStates</li><li>addStates</li><li>removeStates</li><li>setStates</li><li>backStates</li><li>changeData</li></ul><script src="/js/Ale.min1X.js"></script><script>Ale.define({    name: "test",    template: "Try entering aleCom.nextStates() in the console",    permissions: {        nextStates: false    }})var aleCom = Ale.use({    name: "test",    el: "#app"})</script>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Ale component object</title>
      <link href="/2018/12/03/aleCom/"/>
      <url>/2018/12/03/aleCom/</url>
      
        <content type="html"><![CDATA[<h1 id="Ale-component-object"><a href="#Ale-component-object" class="headerlink" title="Ale component object"></a>Ale component object</h1><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>As you probably know in the previous tutorial, <code>ale.js</code> returns an <code>Ale component object</code> every time you use the <code>use</code> component, you can define a variable to receive it:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var aleCom = Ale.use(&#123;</span><br><span class="line">    name: &quot;test&quot;,</span><br><span class="line">    el: &quot;#app&quot;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>After that, you can use any of the receive variables to use the operations provided by any <code>Ale component object</code>, for example:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aleCom.nextState();</span><br></pre></td></tr></table></figure><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><p>The following are the operations supported by all <code>Ale component objects</code>:</p><ul><li>nowState [current state]</li><li>destroy() [Destroy this Ale component object and destroy all of this component in the real DOM]</li><li>changeState() [Change a state, receive an argument of type object, does not affect nowState]</li><li>nextState() [to enter the next state]</li><li>backState() [return to the previous state]</li><li>addState() [Add one or more states, receive an array]</li><li>removeState() [delete a state]</li><li>setState() [Set state, accept an array, overwrite the current state, and the value of nowState becomes 0]</li><li>allState() [return all state lengths]</li></ul>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Data</title>
      <link href="/2018/12/03/dataCom/"/>
      <url>/2018/12/03/dataCom/</url>
      
        <content type="html"><![CDATA[<h1 id="Data"><a href="#Data" class="headerlink" title="Data"></a>Data</h1><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>In the <code>1.0</code> version, we added a new property - <code>data</code></p><p><code>data</code> is used to set the data. You can add a parameter named <code>data</code> when defining the component, or you can add it dynamically when using the component:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/* Add when defining a component */</span><br><span class="line">Ale.define(&#123;</span><br><span class="line">    name: &quot;test&quot;,</span><br><span class="line">    template: &quot;Hello&quot;,</span><br><span class="line">    data: &#123; /* Add data here */</span><br><span class="line">        str: &quot;World&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/* Dynamically added when using components */</span><br><span class="line">Ale.use(&#123;</span><br><span class="line">    name: &quot;test&quot;,</span><br><span class="line">    el: &quot;#app&quot;,</span><br><span class="line">    data: &#123; /* Add data here */</span><br><span class="line">        str: &quot;World&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>If you dynamically add data while using a component, the <strong>name</strong> data added at the time of the definition will be overwritten:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Ale.define(&#123;</span><br><span class="line">    name: &quot;test&quot;,</span><br><span class="line">    template: &quot;Hello&quot;,</span><br><span class="line">    data: &#123;</span><br><span class="line">        str: &quot;World&quot;, /* Str is overwritten */</span><br><span class="line">        str2: &quot;Hello&quot; /* Str2 is not overwritten! Be sure to pay attention! */</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Ale.use(&#123;</span><br><span class="line">    name: &quot;test&quot;,</span><br><span class="line">    el: &quot;#app&quot;,</span><br><span class="line">    data: &#123;</span><br><span class="line">        str: &quot;World&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>So we have defined the data, how to use it? Very simple, just set the value of the parameter of the <strong>support function</strong> to a function, then this function will automatically bind <code>this</code> to <code>data</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Ale.define(&#123;</span><br><span class="line">    name: &quot;test&quot;,</span><br><span class="line">    template: function()&#123;</span><br><span class="line">        return &quot;Hello &quot; + this.str; /* Here return is used to return the value required by the original property */</span><br><span class="line">    &#125;,</span><br><span class="line">    data: &#123;</span><br><span class="line">        str: &quot;World&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Ale.use(&#123;</span><br><span class="line">    name: &quot;test&quot;,</span><br><span class="line">    el: &quot;#app&quot;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p id="app" class="demo"><br><br></p><p>Very simple? Then the following list lists the properties of all supported functions:</p><ul><li>template</li><li>states</li><li>events</li></ul><p><strong>Some properties may not be known yet, but please continue to check out our tutorial!</strong></p><p>Of course, just relying on the fact that data can be dynamically assigned does not yet fully interpret the flexibility of the data, then there is a function - <code>changeData</code></p><p>The <code>changeData</code> function dynamically modifies the value of the data so that you are fully committed to the data. The <code>changeData</code> function is one of the functions of the <code>Ale component object</code>, then you only need to call it like this:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ale component object.changeData();</span><br></pre></td></tr></table></figure><p>At the same time, the changeData function receives <code>2 string</code> parameters, or <code>1 object</code> parameters.</p><p>When you pass in the <code>2 string</code> parameter, the first parameter is the name of the data property to be modified, and the second parameter is the new value passed in:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/* Modify the value of the str attribute of data to Ale.js */</span><br><span class="line">AleComponentObject.changeData(&quot;str&quot;, &quot;Ale.js&quot;);</span><br></pre></td></tr></table></figure><p>When you pass in the <code>1 object</code> parameter, you can write:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/* Modify the value of the str attribute of data and the value of the str2 attribute to Ale.js */</span><br><span class="line">AleComponentObject.changeData(&#123;</span><br><span class="line">    str: &apos;Ale.js&apos;,</span><br><span class="line">    str2: &apos;Ale.js&apos;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>When you call this function and pass in the required value, all properties that apply this value will be updated, so now enter <code>app.changeData(&quot;str&quot;, &quot;new message&quot;);</code> in the console of the current page. and you will see the value of the instance below dynamically updated:</p><p class="demo" id="app2"></p><p>Above demo’s code:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Ale.define(&#123;</span><br><span class="line">    name: &quot;test&quot;,</span><br><span class="line">    template: function()&#123;</span><br><span class="line">        return &quot;Hello &quot; + this.str;</span><br><span class="line">    &#125;,</span><br><span class="line">    data: &#123;</span><br><span class="line">        str: &quot;World&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">var app = Ale.use(&#123;</span><br><span class="line">    name: &quot;test&quot;,</span><br><span class="line">    el: &quot;#app2&quot;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><script src="/js/Ale.min1X.js"></script><script>Ale.define({    name: "test",    template: function(){        return "Hello " + this.str;    },    data: {        str: "World"    }})Ale.use({    name: "test",    el: "#app"})var app = Ale.use({    name: "test",    el: "#app2"})</script>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Permission</title>
      <link href="/2018/12/02/permissionCom/"/>
      <url>/2018/12/02/permissionCom/</url>
      
        <content type="html"><![CDATA[<h1 id="Permission"><a href="#Permission" class="headerlink" title="Permission"></a>Permission</h1><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>When a component is defined, you can add permissions to the component (using a <code>permissions</code> parameter to add):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Ale.define(&#123;</span><br><span class="line">    name: &quot;test&quot;,</span><br><span class="line">    template: &quot;Try entering aleCom.nextState() in the console&quot;,</span><br><span class="line">    permissions: &#123;</span><br><span class="line">        nextState: false</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p id="app" class="demo"><br></p><p>Among them, the <code>permissions</code> parameter requires an <code>Object</code> object, and a <code>Ale component object</code> function faces a Boolean value.</p><p>When the pair value is <code>true</code>, it means that the operation is allowed. When the value is <code>false</code>, the operation is not allowed (all operations default to <code>true</code> permission).</p><p><br></p><p>The following are the function names of all <code>Ale component objects</code> supported by the <code>permissions</code> parameter:</p><ul><li>changeState</li><li>nextState</li><li>addState</li><li>removeState</li><li>setState</li><li>backState</li></ul><script src="/js/Ale.min.js"></script><script>Ale.define({    name: "test",    template: "Try entering aleCom.nextState() in the console",    permissions: {        nextState: false    }})var aleCom = Ale.use({    name: "test",    el: "#app"})</script>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>State</title>
      <link href="/2018/12/02/stateCom-1X/"/>
      <url>/2018/12/02/stateCom-1X/</url>
      
        <content type="html"><![CDATA[<h1 id="State"><a href="#State" class="headerlink" title="State"></a>State</h1><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>State is the most important means to enhance the flexibility of a component. Simply put, each parameter is a state, for example: (Conversely, if a component does not require parameters, then it does not need state)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/* First state */</span><br><span class="line">&#123;</span><br><span class="line">    str: &quot;Hello&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* Second state */</span><br><span class="line">&#123;</span><br><span class="line">    str: &quot;OK&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* Third state */</span><br><span class="line">&#123;</span><br><span class="line">    str: &quot;World&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The state can be added when the component is defined (adding a parameter <code>states</code>), or dynamically after <code>use</code>, and a component can have multiple states:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/* Added when defining */</span><br><span class="line">Ale.define(&#123;</span><br><span class="line">    name: &quot;test&quot;,</span><br><span class="line">    template: &quot;Hello &#123;&#123;=$name$&#125;&#125;&quot;,</span><br><span class="line">    states: [&#123; /* note! Here is the array! */</span><br><span class="line">        name: &quot;Ale.js&quot;</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        name: &quot;Ale.js!!!!&quot;</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/* Can also be added dynamically after use (will override the value specified when defining) */</span><br><span class="line">var app = Ale.use(&#123;</span><br><span class="line">    name: &quot;test&quot;,</span><br><span class="line">    el: &quot;#app&quot;,</span><br><span class="line">    states: [&#123; /* note! Here is the array! */</span><br><span class="line">        name: &quot;Ale.js&quot;</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        name: &quot;Ale.js!!!!&quot;</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Demo:</p><p id="app" class="demo"></p><p>At this point, let’s test if the state of the component is added. How to test it? Just type <code>app.nextStates()</code> in the console (just open this page) and you will find the value of the above instance changes. It is.</p><p>Of course, there is a back to have next, now let’s type <code>app.backStates()</code> and let the state of the component go back!</p><p><br></p><p>At this point, you may think, we did not specify which state the default state is, then how is the distinction between <code>Ale.js</code>?</p><p><br></p><p>In fact, when you define or use a component, there is a parameter that specifies the specific default state, which is the <code>defaultState</code> parameter.</p><p>The default value of the <code>defaultState</code> parameter is 0, and <code>0</code> is equivalent to the first state (because the array starts at 0), so you will find that the previous instance works fine if we manually define the component or use the component. Specify the value of the <code>defaultState</code> parameter, then the default state of this component will change:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/* Specified when defining */</span><br><span class="line">Ale.define(&#123;</span><br><span class="line">    name: &quot;test&quot;,</span><br><span class="line">    template: &quot;Hello &#123;&#123;=$name$&#125;&#125;&quot;,</span><br><span class="line">    states: [&#123; /* note! Here is the array! */</span><br><span class="line">        name: &quot;Ale.js&quot;</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        name: &quot;Ale.js!!!!&quot;</span><br><span class="line">    &#125;],</span><br><span class="line">    defaultState: 1</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/* Can also be specified dynamically after use (will override the value specified when defining) */</span><br><span class="line">var app = Ale.use(&#123;</span><br><span class="line">    name: &quot;test&quot;,</span><br><span class="line">    el: &quot;#app&quot;,</span><br><span class="line">    states: [&#123; /* note! Here is the array! */</span><br><span class="line">        name: &quot;Ale.js&quot;</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        name: &quot;Ale.js!!!!&quot;</span><br><span class="line">    &#125;],</span><br><span class="line">    defaultState: 1</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Demo:</p><p id="app2" class="demo"></p><h3 id="Function-list"><a href="#Function-list" class="headerlink" title="Function list"></a>Function list</h3><p>The following list is all the functions or properties related to <code>State</code> built into <code>Ale component object</code>:</p><ul><li>nextStates(steps) [forward a state]<strong>(you can specify a parameter to use to advance how many steps)</strong></li><li>backStates(steps) [Backward a state]<strong>(You can specify a parameter to use to step back)</strong></li><li>changeState(obj) [Change a state, you need an object type parameter]</li><li>addStates(arr) [Add one or more states, you need an array type parameter]</li><li>removeStates(steps) [Delete one or more states]<strong>(You can specify a parameter to delete how many steps)</strong></li><li>setStates(arr) [Set state, need an array type parameter]</li><li>statesLength() [How many states are returned in the component]</li></ul><script src="/js/Ale.min1X.js"></script><script>Ale.define({    name: "test",    template: "Hello \{\{\=\$name\$\}\}",    states: [{        name: "Ale.js"    }, {        name: "Ale.js!!!!"    }]})var app = Ale.use({    name: "test",    el: "#app"})var app = Ale.use({    name: "test",    el: "#app2",    defaultState: 1})</script>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Component basis</title>
      <link href="/2018/12/01/basicCom-1X/"/>
      <url>/2018/12/01/basicCom-1X/</url>
      
        <content type="html"><![CDATA[<h1 id="Component-basis"><a href="#Component-basis" class="headerlink" title="Component basis"></a>Component basis</h1><h3 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h3><p>You can use the <code>Ale.define</code> function to define a component. The most basic component must have at least two parameters (name and template):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/* Define a test component */</span><br><span class="line">Ale.define(&#123;</span><br><span class="line">    name: &quot;test&quot;, /* Component name */</span><br><span class="line">    template: &quot;Hello World&quot; /* Component template */</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Then we use a component with the <code>Ale.use</code> function, noting that <code>name</code> is the same:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Ale.use(&#123;</span><br><span class="line">    name: &quot;test&quot;, /* Component name */</span><br><span class="line">    el: &quot;#app&quot; /* Target element */</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Then we can see that this component has been rendered:</p><p id="app" class="demo"></p><p class="info-box">note! The innerHTML property in the target element will be emptied each time the component is rendered! So please don’t use a DOM element with other information as the target element of the component!</p><p>Of course, you can also write the template syntax of <code>Alen</code> in the <code>template</code> parameter. The specific template syntax is as follows:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; &#125;&#125; Execute a piece of js code, no output (spaces are supported in double braces)</span><br><span class="line">&#123;&#123;= &#125;&#125; Execute a piece of js code and output (the spaces are supported in double braces, but please don&apos;t put a space in front of the = sign! Otherwise it will only execute, it will not output) [Unescaped HTML]</span><br><span class="line">&#123;&#123;=! &#125;&#125; Execute a piece of js code and output (the spaces are supported in double braces, but please don&apos;t put a space before the = sign! Otherwise it will only execute, it will not output) [escaped HTML]</span><br><span class="line"></span><br><span class="line">In the template, you need to wrap a variable name defined in data with a pair of $:</span><br><span class="line">&#123;&#123;=$var$&#125;&#125;</span><br><span class="line"></span><br><span class="line">If you are a variable defined in the template, you don&apos;t need a pair $</span><br><span class="line">&#123;&#123;var var1 = &quot;Hello&quot;; alert(var1)&#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Ale.define(&#123;</span><br><span class="line">    name: &quot;test2&quot;, /* Component name */</span><br><span class="line">    template: &quot;Hello &#123;&#123;=$name$&#125;&#125;&quot; /* Component template */</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Of course, if you only write the template syntax in the <code>template</code> parameter, it will have no effect, so we also need to add a parameter called <code>states</code>: (learn the specific <code>states</code> parameter, please visit the tutorial below)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Ale.define(&#123;</span><br><span class="line">    name: &quot;test2&quot;, /* Component name */</span><br><span class="line">    template: &quot;Hello &#123;&#123;=$name$&#125;&#125;&quot;, /* Component template */</span><br><span class="line">    states: [&#123; /* Defining state */</span><br><span class="line">        name: &quot;Ale.js&quot;</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Demo:</p><p id="app2" class="demo"></p><p>Whenever you <code>use</code> a component, the use function returns a <code>Ale component object</code>, you can define a variable to accept it:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var aleCom = Ale.use(&#123;</span><br><span class="line">    name: &quot;test2&quot;,</span><br><span class="line">    el: &quot;#app3&quot;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The specific <code>Ale component object</code> is useful, please refer to the following tutorial.</p><h3 id="Ready"><a href="#Ready" class="headerlink" title="Ready?"></a>Ready?</h3><p>Ready? You already know some of the most basic skills of the components, please read on now!</p><script src="/js/Ale.min1X.js"></script><script>Ale.define({    name: "test",    template: "Hello World"})Ale.use({    name: "test",    el: "#app"})Ale.define({    name: "test2",    template: "Hello \{\{\=\$name\$\}\}",    states: [{        name: "Ale.js"    }]})Ale.use({    name: "test2",    el: "#app2"})</script>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Life</title>
      <link href="/2018/12/01/lifeCom/"/>
      <url>/2018/12/01/lifeCom/</url>
      
        <content type="html"><![CDATA[<h1 id="Life"><a href="#Life" class="headerlink" title="Life"></a>Life</h1><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>In <code>Ale.js</code>, a component has several states in its life cycle:</p><ul><li>Using (when the component is used)</li><li>Mounting (when the component is inserted into the real DOM)</li><li>Rendering (when the component is rendered)</li><li>Unmounting (when the component is removed from the real DOM)</li><li>Destroy (when the component is destroyed)</li></ul><p>(More lifecycle states will be added in the <code>1.0</code> version)</p><p>We allow you to set the lifecycle when the component is defined, but you can’t set it when the component is used (just add a parameter - <code>life</code>):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Ale.define(&#123;</span><br><span class="line">    name: &quot;test&quot;,</span><br><span class="line">    template: &quot;Hello World&quot;,</span><br><span class="line">    life: &#123; /* Each state in the list above corresponds to a function */</span><br><span class="line">        Using: function()&#123;</span><br><span class="line">            /* When using */</span><br><span class="line">            alert(&quot;Used!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p id="app" class="demo"><button onclick="useCom()">Click me to use the test component</button></p><p>The <code>Using</code> function will be fired when the component is used, and the <code>Rendering</code> and <code>Mounting</code> functions will be fired when the component is used.</p><p><br></p><p>The <code>Rendering</code> function is fired after the actual DOM update affected by each change in the state of the component.</p><p><br></p><p>The <code>Unmounting</code> and <code>Destroy</code> functions are fired when the component is destroyed.</p><script src="/js/Ale.min1X.js"></script><script>Ale.define({    name: "test",    template: "Hello World",    life: {        Using: function(){            alert("Used!");        }    }})function useCom(){    Ale.use({        el: "#app",        name: "test"    })}</script>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>State</title>
      <link href="/2018/11/30/stateCom/"/>
      <url>/2018/11/30/stateCom/</url>
      
        <content type="html"><![CDATA[<h1 id="State"><a href="#State" class="headerlink" title="State"></a>State</h1><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>State is the most important means to enhance the flexibility of a component. Simply put, each parameter is a state, for example: (Conversely, if a component does not require parameters, then it does not need state)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/* First state */</span><br><span class="line">parameters: &#123;</span><br><span class="line">    str: &quot;Hello&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* Second state */</span><br><span class="line">parameters: &#123;</span><br><span class="line">    str: &quot;OK&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* Third state */</span><br><span class="line">parameters: &#123;</span><br><span class="line">    str: &quot;World&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Status can be added when the component is defined, or dynamically after <code>use</code>, and a component can have multiple states:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/* Added when defining</span><br><span class="line"> */</span><br><span class="line">Ale.define(&#123;</span><br><span class="line">    name: &quot;test&quot;,</span><br><span class="line">    template: &quot;Hello &#123;&#123;=$name$&#125;&#125;&quot;,</span><br><span class="line">    state: [&#123; /* note! Here is the array! */</span><br><span class="line">        name: &quot;Ale.js&quot;</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        name: &quot;Ale.js!!!!&quot;</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var aleCom = Ale.use(&#123;</span><br><span class="line">    name: &quot;test&quot;,</span><br><span class="line">    el: &quot;#app&quot;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">/* Call the setState method of the component object here */</span><br><span class="line">aleCom.setState([&#123; /* note! Here is the array! */</span><br><span class="line">    name: &quot;Ale.js&quot;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    name: &quot;Ale.js!!!!&quot;</span><br><span class="line">&#125;])</span><br></pre></td></tr></table></figure><p>After the completion, this instance does not show the effect we want now. In this case, we only need to add a parameter to the definition, parameter, and initialize it to it:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Ale.define(&#123;</span><br><span class="line">    name: &quot;test&quot;,</span><br><span class="line">    template: &quot;Hello &#123;&#123;=$name$&#125;&#125;&quot;,</span><br><span class="line">    state: [&#123;</span><br><span class="line">        name: &quot;Ale.js&quot;</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        name: &quot;Ale.js!!!!&quot;</span><br><span class="line">    &#125;],</span><br><span class="line">    parameters: &#123;</span><br><span class="line">        name: &quot;World&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p id="app" class="demo"></p><p>At this point, let’s test if the state of the component is added. How to test it, just enter <code>aleCom.nextState()</code> in the console (just open this page), you will find the value of the above instance changes. It is.</p><p>Of course, there is a back to have next, now let’s type <code>aleCom.backState()</code> and let the state of the component go back!</p><p><br></p><p>At this point, if you only return the state of the component once after refreshing the page, we will find that the component’s <code>backState()</code> function returns a value of <code>false</code> and has no effect at all.</p><p>So why is this? Since we started the component by the <code>parameters</code> parameter, we just had a next state, so we can’t return. At this point we only need to adjust the code structure slightly:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Ale.define(&#123;</span><br><span class="line">    name: &quot;test2&quot;,</span><br><span class="line">    template: &quot;Hello &#123;&#123;=$name$&#125;&#125;&quot;,</span><br><span class="line">    state: [&#123;</span><br><span class="line">        name: &quot;World&quot;</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        name: &quot;Ale.js&quot;</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        name: &quot;Ale.js!!!!&quot;</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">var aleCom2 = Ale.use(&#123;</span><br><span class="line">    name: &quot;test2&quot;,</span><br><span class="line">    el: &quot;#app2&quot;</span><br><span class="line">&#125;)</span><br><span class="line">aleCom2.nextState();</span><br></pre></td></tr></table></figure><p id="app2" class="demo"></p><p>Now you type <code>aleCom2.nextState()</code> on the page, then type <code>aleCom2.backState()</code>, and you will find that this instance works fine.</p><h3 id="Function-List"><a href="#Function-List" class="headerlink" title="Function List"></a>Function List</h3><p>The following list is all the functions related to <code>State</code> built into <code>Ale component object</code>:</p><ul><li>nextState() [forward one state]</li><li>backState() [backward one state]</li><li>changeState() [Change a state, you need an object type parameter]</li><li>addState() [Add one or more states, you need an array type parameter]</li><li>removeState() [delete a state]</li><li>setState() [Set the state, nowState will become 0]</li><li>allState() [How many states are returned in the component]</li></ul><script src="/js/Ale.min.js"></script><script>Ale.define({    name: "test",    template: "Hello \{\{\=\$name\$\}\}",    state: [{        name: "Ale.js"    }, {        name: "Ale.js!!!!"    }],    parameters: {        name: "World"    }})var aleCom = Ale.use({    name: "test",    el: "#app"})Ale.define({    name: "test2",    template: "Hello \{\{\=\$name\$\}\}",    state: [{        name: "World"    }, {        name: "Ale.js"    }, {        name: "Ale.js!!!!"    }]})var aleCom2 = Ale.use({    name: "test2",    el: "#app2"})aleCom2.nextState();</script>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Event</title>
      <link href="/2018/11/30/events/"/>
      <url>/2018/11/30/events/</url>
      
        <content type="html"><![CDATA[<h1 id="Event"><a href="#Event" class="headerlink" title="Event"></a>Event</h1><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p><code>Ale.js</code> can easily help you add events to the parent element, just add a parameter - <code>events</code></p><p>You can’t currently add event <code>(version 1.0 will be added)</code> when the component is defined, but we allow you to add events when the component is used:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/* The events parameter supports all events, just use click example */</span><br><span class="line">Ale.use(&#123;</span><br><span class="line">    name: &quot;test&quot;,</span><br><span class="line">    el: &quot;#app&quot;,</span><br><span class="line">    events: &#123;</span><br><span class="line">        click: function()&#123;</span><br><span class="line">            alert(&quot;clicked!&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p id="app" class="demo"></p><p>Here you need to be aware that all event names inside the <code>events</code> parameter do not need to be prefixed with <code>on</code>!</p><script src="/js/Ale.min1X.js"></script><script>Ale.define({    name: "test",    template: "Click me!"})Ale.use({    name: "test",    el: "#app",    events: {        click: function(){            alert("clicked!")        }    }})</script>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Component basis</title>
      <link href="/2018/11/29/basicCom/"/>
      <url>/2018/11/29/basicCom/</url>
      
        <content type="html"><![CDATA[<h1 id="Component-basis"><a href="#Component-basis" class="headerlink" title="Component basis"></a>Component basis</h1><h3 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h3><p>You can use the <code>Ale.define</code> function to define a component. The most basic component must have at least two parameters (name and template):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/* Define a test component */</span><br><span class="line">Ale.define(&#123;</span><br><span class="line">    name: &quot;test&quot;, /* Component name */</span><br><span class="line">    template: &quot;Hello World&quot; /* Component template */</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Then we use a component with the <code>Ale.use</code> function, noting that <code>name</code> is the same:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Ale.use(&#123;</span><br><span class="line">    name: &quot;test&quot;, /* Component name */</span><br><span class="line">    el: &quot;#app&quot; /* Target element */</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Then we can see that this component has been rendered:</p><p id="app" class="demo"></p><p class="info-box">note! The innerHTML property in the target element will be emptied each time the component is rendered! So please don’t use a DOM element with other information as the target element of the component!</p><p>Of course, you can also write the template syntax of <code>Alen</code> in the <code>template</code> parameter. The specific template syntax is as follows:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; &#125;&#125; Execute a piece of js code, no output (spaces are supported in double braces)</span><br><span class="line">&#123;&#123;= &#125;&#125; Execute a piece of js code and output (the spaces are supported in double braces, but please don&apos;t put a space in front of the = sign! Otherwise it will only execute, it will not output) [Unescaped HTML]</span><br><span class="line">&#123;&#123;=! &#125;&#125; Execute a piece of js code and output (the spaces are supported in double braces, but please don&apos;t put a space before the = sign! Otherwise it will only execute, it will not output) [escaped HTML]</span><br><span class="line"></span><br><span class="line">In the template, you need to wrap a variable name defined in data with a pair of $:</span><br><span class="line">&#123;&#123;=$var$&#125;&#125;</span><br><span class="line"></span><br><span class="line">If you are a variable defined in the template, you don&apos;t need a pair $</span><br><span class="line">&#123;&#123;var var1 = &quot;Hello&quot;; alert(var1)&#125;&#125;</span><br></pre></td></tr></table></figure><p>E.g:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Ale.define(&#123;</span><br><span class="line">    name: &quot;test2&quot;, /* Component name */</span><br><span class="line">    template: &quot;Hello &#123;&#123;=$name$&#125;&#125;&quot; /* Component template */</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Of course, if you only write the template syntax in the <code>template</code> parameter, it will have no effect, so we also need to add a parameter called <code>parameters</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Ale.define(&#123;</span><br><span class="line">    name: &quot;test2&quot;, /* Component name */</span><br><span class="line">    template: &quot;Hello &#123;&#123;=$name$&#125;&#125;&quot;, /* Component template */</span><br><span class="line">    parameters: &#123; /* Defining parameters */</span><br><span class="line">        name: &quot;Ale.js&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Result：</p><p id="app2" class="demo"></p><p>When you fill in <code>parameters</code> in the <code>define</code> function, the argument will be the default. If you specify <code>parameters</code> in the <code>use</code> method, the default argument will be overridden:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Ale.use(&#123;</span><br><span class="line">    name: &quot;test2&quot;, /* Component name (note here is test2) */</span><br><span class="line">    el: &quot;#app3&quot;, /* Target element */</span><br><span class="line">    parameters: &#123; /* Specified parameter */</span><br><span class="line">        name: &quot;Ale.js!!!!&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p id="app3" class="demo"></p><p>Whenever you <code>use</code> a component, the use function returns an <code>Ale component object</code>, and you can define a variable to receive it:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var aleCom = Ale.use(&#123;</span><br><span class="line">    name: &quot;test2&quot;,</span><br><span class="line">    el: &quot;#app3&quot;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The specific <code>Ale component object</code> is useful, please refer to the following tutorial.</p><h3 id="Ready"><a href="#Ready" class="headerlink" title="Ready?"></a>Ready?</h3><p>Ready? You already know some of the most basic skills of the components, please read on now!</p><script src="/js/Ale.min.js"></script><script>Ale.define({    name: "test",    template: "Hello World"})Ale.use({    name: "test",    el: "#app"})Ale.define({    name: "test2",    template: "Hello \{\{\=\$name\$\}\}",    parameters: {        name: "Ale.js"    }})Ale.use({    name: "test2",    el: "#app2"})Ale.use({    name: "test2",    el: "#app3",    parameters: {        name: "Ale.js!!!!"    }})</script>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Miscellaneous attribute</title>
      <link href="/2018/11/28/otherFun/"/>
      <url>/2018/11/28/otherFun/</url>
      
        <content type="html"><![CDATA[<h1 id="Miscellaneous-attribute"><a href="#Miscellaneous-attribute" class="headerlink" title="Miscellaneous attribute"></a>Miscellaneous attribute</h1><h4 id="version"><a href="#version" class="headerlink" title="version"></a>version</h4><p>Use the version attribute to get the version information:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ale.version /* Note that it is a property, not a function, no need to add parentheses! */</span><br></pre></td></tr></table></figure><p>For example, the version of <code>Ale.js</code> included in the current official website is:</p><p id="app" class="demo"><br><br></p><script src="/js/Ale.min1X.js"></script><script>document.querySelector("#app").innerHTML = Ale.version;</script>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Alen</title>
      <link href="/2018/11/28/alen/"/>
      <url>/2018/11/28/alen/</url>
      
        <content type="html"><![CDATA[<h1 id="Alen"><a href="#Alen" class="headerlink" title="Alen"></a>Alen</h1><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>Welcome to the world of the latest template engine <code>Alen</code>, Alen has the performance beyond the other <code>99%</code> template engines!</p><p><br></p><p>Let’s look at a set of data first:<br>[Execute a template to replace 100 elements]</p><ul><li>Alen (Ale.js): 17~20ms</li><li>Per.js: 26~30ms (JS framework that claims to be super fast)</li><li>Vue.js: 107~128ms (Because Vue does not support multi-element template replacement, you need to use a for loop)</li><li>Angular: 228~333ms (Because Angular does not support multi-element template replacement, you need to use a for loop)</li></ul><p>The reason that <code>Alen</code> is so fast may be because our data and views are not tied. This is because <code>Alen</code> is just a template engine, and the binding of <code>Model</code> and <code>View</code> will be done by <code>Ale.js</code>!</p><p><br></p><p>Of course, there is still a small problem when testing. In fact, it is not correct to use the template engine to compare with other frameworks. However, due to limited author ability, it is impossible to separate the template engines of <code>Angular</code> and <code>Vue</code>. Split and separate (and I believe that this will not be done in actual development), so I can only compare this first. If you need data and view bindings, then use the component features of <code>Ale.js</code>!</p><h3 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h3><p><code>Ale.js</code> has a built-in function called <code>data</code>, which is equivalent to calling the <code>Alen</code> template engine!</p><p>The <code>data</code> function not only supports template replacement, but also supports list output, which you will learn in the following sections! (In fact, the comparison of the previous chapters is also a data function, so it is slower than using the pure Alen template engine.)</p><p>The following example renders a HelloWorld page:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&apos;app1&apos;&gt;Hello &#123;&#123;=$name$&#125;&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Ale.data(&quot;#app1&quot;, &#123;</span><br><span class="line">    name: &quot;World&quot;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p id="app1" class="demo">Hello World</p><h3 id="Template-syntax"><a href="#Template-syntax" class="headerlink" title="Template syntax"></a>Template syntax</h3><p>The following describes the template syntax that is owned by <code>Alen</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; &#125;&#125; Execute a piece of js code, no output (spaces are supported in double braces)</span><br><span class="line">&#123;&#123;= &#125;&#125; Execute a piece of js code and output (the spaces are supported in double braces, but please don&apos;t put a space in front of the = sign! Otherwise it will only execute, it will not output) [Unescaped HTML]</span><br><span class="line">&#123;&#123;=! &#125;&#125; Execute a piece of js code and output (the spaces are supported in double braces, but please don&apos;t put a space before the = sign! Otherwise it will only execute, it will not output) [escaped HTML]</span><br><span class="line"></span><br><span class="line">In the template, you need to wrap a variable name defined in data with a pair of $:</span><br><span class="line">&#123;&#123;=$var$&#125;&#125;</span><br><span class="line"></span><br><span class="line">If you are a variable defined in the template, you don&apos;t need a pair $</span><br><span class="line">&#123;&#123;var var1 = &quot;Hello&quot;; alert(var1)&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="List-rendering"><a href="#List-rendering" class="headerlink" title="List rendering"></a>List rendering</h3><p>Rendering with <code>Ale.js</code> is very simple, just add a property <code>a-for</code> to the element you want to render and define an array in data!</p><p>For example, the following example renders an array named <code>names</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul id=&apos;app2&apos;&gt;</span><br><span class="line">    &lt;li a-for=&apos;name in names&apos;&gt;Hello &#123;&#123;=$name$&#125;&#125;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Ale.data(&quot;#app2&quot;, &#123;</span><br><span class="line">    names: [&quot;Bill&quot;, &quot;Rick&quot;, &quot;Andy&quot;, &quot;Leo&quot;]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Demo:</p><ul class="demo"><br>    <li>Hello Bill</li><br>    <li>Hello Rick</li><br>    <li>Hello Andy</li><br>    <li>Hello Leo</li><br></ul><p>Of course, you may have found that the <code>a-for</code> attribute requires a value of <code>item in items</code>! Where <code>item</code> is the name of the variable to be rendered, and <code>items</code> is the name of the array to be rendered.</p><p>At the same time, we specifically optimized for multi-level list rendering, see the example below, rendering the names of these people, and then rendering their house:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul id=&apos;app3&apos;&gt;</span><br><span class="line">    &lt;li a-for=&apos;person in people&apos;&gt;</span><br><span class="line">        &#123;&#123;=$person$.name&#125;&#125;&apos;s house in:</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li a-for=&apos;house in houses&apos;&gt;</span><br><span class="line">                &#123;&#123;=$house$&#125;&#125;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Ale.data(&quot;#app3&quot;, &#123;</span><br><span class="line">    people: [&#123;</span><br><span class="line">        name: &quot;Bill&quot;,</span><br><span class="line">        houses: [&quot;China&quot;,&quot;US&quot;]</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        name: &quot;Rick&quot;,</span><br><span class="line">        houses: [&quot;China&quot;]</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        name: &quot;Andy&quot;,</span><br><span class="line">        houses: [&quot;US&quot;]</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        name: &quot;Leo&quot;,</span><br><span class="line">        houses: [&quot;Mexico&quot;,&quot;US&quot;]</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Demo:</p><ul class="demo"><br>    <li>Bill’s house in:<br>        <ul><br>            <li>China</li><br>            <li>US</li><br>        </ul><br>    </li><br>    <li>Rick’s house in:<br>        <ul><br>            <li>China</li><br>        </ul><br>    </li><br>    <li>Andy’s house in:<br>        <ul><br>            <li>US</li><br>        </ul><br>    </li><br>    <li>Leo’s house in:<br>        <ul><br>            <li>Mexico</li><br>            <li>US</li><br>        </ul><br>    </li><br></ul><p>Of course, if your list is very special, you need to enter two objects to get the array if necessary. In this case, you need to separate the directory with <code>.</code> on the <code>a-for</code> attribute of the child element! Note, however, that the <code>a-for</code> attribute of the child element in the parent element you selected does not support <code>.</code>, for example, there is now such a data:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    arr: [&#123;</span><br><span class="line">        bill: [&#123;</span><br><span class="line">            say: &#123;</span><br><span class="line">                sen: [&quot;Hello&quot;, &quot;ok&quot;]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;],</span><br><span class="line">        andy: [&#123;</span><br><span class="line">            say: &#123;</span><br><span class="line">                sen: [&quot;你好&quot;, &quot;haha&quot;]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If you want to output <code>bill</code> and <code>andy</code> separately, then you need to write two lists instead of writing:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- It is wrong to write this way! Do not imitate --&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li a-for=&apos;person in arr.bill&apos;&gt; &lt;!-- error! &quot;.&quot; cannot be added here, because it is a direct child element, so &quot;.&quot; is not supported. --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><p>So then you need to separate them into two arrays:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    bill: [&#123;</span><br><span class="line">        say: &#123;</span><br><span class="line">            sen: [&quot;Hello&quot;, &quot;ok&quot;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;]</span><br><span class="line"></span><br><span class="line">    andy: [&#123;</span><br><span class="line">        say: &#123;</span><br><span class="line">            sen: [&quot;你好&quot;, &quot;haha&quot;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then output separately:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li a-for=&apos;person in bill&apos;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li a-for=&apos;person in andy&apos;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><p>So if we want to output <code>sen</code> in <code>say</code>, we need to write this:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li a-for=&apos;person in bill&apos;&gt; &lt;!-- Note the directory structure here, enter the bill directory --&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li a-for=&apos;sentence in say.sen&apos;&gt; &lt;!-- Enter the sen in the say directory under the bill directory --&gt;</span><br><span class="line"></span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li a-for=&apos;person in andy&apos;&gt; &lt;!-- Note the directory structure here, enter the andy directory --&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li a-for=&apos;sentence in say.sen&apos;&gt;  &lt;!-- Enter the sen directory under the andy directory --&gt;</span><br><span class="line"></span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Introduction</title>
      <link href="/2018/11/27/introduction/"/>
      <url>/2018/11/27/introduction/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><h3 id="What-is-Ale-js"><a href="#What-is-Ale-js" class="headerlink" title="What is Ale.js?"></a>What is Ale.js?</h3><p>Ale.js (Chinese: 啤酒) is a set of frameworks that operate only on the user’s view. It believes that everything is a component. Unlike other large frameworks, its core only focuses on the view layer and uses the State state stream to provide drivers for your complex pages. More importantly, it can help you get rid of the complex relationship between view and data, let you devote yourself to the processing of data, without considering any view-related content. Just like other MVC, MVVM, and MVP frameworks, but it can supports <code>IE8</code>.</p><p><br></p><p>And most importantly, the flexible construction inside Ale.js can help you increase page flexibility, allowing you to do more with less code, such as we use React and Vue to implement a timer each. Refreshing every 1 second requires:</p><ul><li>Ale (22 lines of code)</li><li>Vue (23 lines of code)</li><li>React (30 lines of code)</li></ul><p>For example:</p><p id="app2" class="demo"><br><br></p><h3 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h3><p class="info-box">Our official guide assumes that you already have a basic knowledge of HTML, CSS, and JavaScript. If you are just starting to learn about front-end development, it may not be the best idea to use the framework as your first step - get the basics and come back! Previous experience with other frameworks will help, but it is not required.</p><p>The simplest example of trying to use <code>Ale.js</code> is to make a <code>HelloWorld</code> page. Now you can create a new <code>.html</code> file and try to open it in your browser.</p><p>Let’s assume that you have downloaded the version file of <code>Ale.js</code> on Github. You can see that the directory structure looks like this:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">├─ Ale.js /* Ale.js Core library (development version)*/</span><br><span class="line">└─Ale.min.js /* Ale.js Core library (production version)*/</span><br></pre></td></tr></table></figure></p><p>We first need to introduce the <code>Ale.js</code> file with the <code>&lt;script&gt;</code> tag:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Development environment version --&gt;</span><br><span class="line">&lt;script src=&quot;Ale.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>Or：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Production environment version, compressed code --&gt;</span><br><span class="line">&lt;script src=&quot;Ale.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h3><p>Ale.js can help you build fast and flexible JS responsive pages, which you may not understand in this tutorial.</p><p>Let’s make a simple <code>HelloWorld</code> page first!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&apos;app&apos;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/* Make a simple HelloWorld page */</span><br><span class="line">Ale.define(&#123;</span><br><span class="line">    name: &quot;test&quot;,</span><br><span class="line">    template: &quot;&#123;&#123;=$message$&#125;&#125;&quot;,</span><br><span class="line">    states: [&#123;</span><br><span class="line">        message: &quot;Hello World&quot;</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">var app = Ale.use(&#123;</span><br><span class="line">    name: &quot;test&quot;,</span><br><span class="line">    el: &quot;#app&quot;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Demo：</p><p id="app" class="demo"></p><p>Congratulations! You have now created an Ale.js page of your own! It seems that this is very similar to rendering a string template, but Ale.js does a lot of work behind the scenes, data and DOM have been linked, everything is responsive. How to confirm it? Open your browser’s JavaScript console (just open on this page) and type the value of <code>app.changeState({message: &quot;Hello Ale.js&quot;})</code> and you will see the above example updated accordingly.</p><p><br></p><p>If you can’t satisfy these effects, just start learning now!</p><script src="/js/Ale.min1X.js"></script><script>Ale.define({    name: "test",    template: "\{\{\=\$message\$\}\}",    states: [{        message: "Hello World"    }]})var app = Ale.use({    name: "test",    el: "#app"})Ale.define({   name: "timer",   template: "Time：\{\{\=\!\$time\$\}\}",   states: function(){       return [{           time: this.time       }]   },   data: {       time: new Date().toLocaleTimeString()   },   life: {       Mounting: function(){           this.timer = setInterval(() => {               this.changeData("time", new Date().toLocaleTimeString());           }, 1000);       },       UnMounting: function(){           clearInterval(this.timer);       }   }})Ale.use({name: "timer",el: "#app2"})</script>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Installation</title>
      <link href="/2018/11/26/installation/"/>
      <url>/2018/11/26/installation/</url>
      
        <content type="html"><![CDATA[<h1 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h1><h3 id="Compatibility"><a href="#Compatibility" class="headerlink" title="Compatibility"></a>Compatibility</h3><p>Some older browsers are not currently used by many users, so Ale.js chooses minimal support to IE8.</p><p><br></p><p>The following is a detailed browser compatibility list:</p><ul><li>IE 8</li><li>Chrome 4</li><li>Firefox 3.5</li><li>Opera 10</li><li>Safari 3.1</li></ul><h3 id="Version-Information"><a href="#Version-Information" class="headerlink" title="Version Information"></a>Version Information</h3><p><strong>Latest stable version</strong>: none</p><p><strong>Latest version</strong>: 1.0-Alpha</p><p>For more detailed version update information please visit <a href="https://github.com/Ale-js/ale" target="_blank" rel="noopener">GitHub</a>.</p><h4 id="Tip"><a href="#Tip" class="headerlink" title="Tip"></a>Tip</h4><p>At present, <code>Ale.js</code> is in <code>1.0-Alpha</code> version. There is no official version yet. We strongly hope that you will send us an email to tell us some comments or suggestions about <code>Ale.js</code>. As long as it is reasonable and good advice, we will join in version <code>1.0</code>! <strong>[E-mail: <a href="mailto:bill-dong@hotmail.com" target="_blank" rel="noopener">bill-dong@hotmail.com</a>]</strong></p><p><br></p><p><strong>Why not give us a few Stars on <a href="https://github.com/Ale-js/ale" target="_blank" rel="noopener">Github</a>?</strong></p><h3 id="Direct-lt-script-gt-include"><a href="#Direct-lt-script-gt-include" class="headerlink" title="Direct &lt;script&gt; include"></a>Direct &lt;script&gt; include</h3><p>Include the Ale.js file directly using the &lt;script&gt; tag. <code>Ale</code> will be registered as a global variable.</p><p class="info-box">We do not recommend that you introduce a development version of the <code>Ale.js</code> file in your production environment, as this will slow down your file loading speed! It will also slow down the code execution speed of <code>Ale.js</code>!</p><p><a href="https://github.com/Ale-js/ale" target="_blank" rel="noopener"><button class="post-btn">Development version</button></a></p><p><a href="https://github.com/Ale-js/ale" target="_blank" rel="noopener"><button class="post-btn">Compressed version</button></a></p><h3 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h3><p>The <code>CDN</code> feature is not yet open, please wait for the <code>1.0</code> official release!</p>]]></content>
      
      
      
    </entry>
    
  
  
</search>
