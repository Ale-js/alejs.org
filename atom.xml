<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ale.js</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.alejs.org/"/>
  <updated>2019-01-13T02:31:42.901Z</updated>
  <id>http://www.alejs.org/</id>
  
  <author>
    <name>Bill Dong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Other functions</title>
    <link href="http://www.alejs.org/guide/v1/other/"/>
    <id>http://www.alejs.org/guide/v1/other/</id>
    <published>2019-01-13T02:31:13.655Z</published>
    <updated>2019-01-13T02:31:42.901Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Other-functions"><a href="#Other-functions" class="headerlink" title="Other functions"></a>Other functions</h1><h4 id="isHasThisComponent"><a href="#isHasThisComponent" class="headerlink" title="isHasThisComponent"></a>isHasThisComponent<div class="v100-add"></div></h4><p>The <code>Ale.isHasThisComponent</code> function is used to get whether a component is globally registered (returning the bool value) [receive a parameter as the component name]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Ale(&quot;test&quot;, &#123;</span><br><span class="line">    template: function()&#123;</span><br><span class="line">        return this.data.isReg;</span><br><span class="line">    &#125;,</span><br><span class="line">    data: &#123;</span><br><span class="line">        isReg: false</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">var app = Ale.render(&quot;test&quot;, &#123;</span><br><span class="line">    el: &quot;#app&quot;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.data.isReg = Ale.isHasThisComponent(&quot;test&quot;);</span><br></pre></td></tr></table></figure><div class="demo" id="app"></div><script src="../../../../js/Ale.v1.min.js"></script><script>Ale("test", {    template: function(){        return this.data.isReg;    },    data: {        isReg: false    }})var app = Ale.render("test", {    el: "#app"})app.data.isReg = Ale.isHasThisComponent("test");</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Other-functions&quot;&gt;&lt;a href=&quot;#Other-functions&quot; class=&quot;headerlink&quot; title=&quot;Other functions&quot;&gt;&lt;/a&gt;Other functions&lt;/h1&gt;&lt;h4 id=&quot;isHasThisComp
      
    
    </summary>
    
      <category term="v1" scheme="http://www.alejs.org/categories/v1/"/>
    
    
  </entry>
  
  <entry>
    <title>Async DOM</title>
    <link href="http://www.alejs.org/guide/v1/nextTick/"/>
    <id>http://www.alejs.org/guide/v1/nextTick/</id>
    <published>2019-01-13T02:29:17.638Z</published>
    <updated>2019-01-13T02:31:04.622Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Async-DOM"><a href="#Async-DOM" class="headerlink" title="Async DOM"></a>Async DOM<p class="v100-add"></p></h1><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>In version 1.0.0 and later, we allow you to update the DOM using <code>asynchronous queues</code>, which means higher performance.</p><p>For example, we have a component that needs to be updated cyclically:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Ale(<span class="string">"test"</span>, &#123;</span><br><span class="line">    template: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.data.i;</span><br><span class="line">    &#125;,</span><br><span class="line">    data: &#123;</span><br><span class="line">        i: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = Ale.render(<span class="string">"test"</span>, &#123;</span><br><span class="line">    el: <span class="string">"#app"</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Updated 10,000 times here */</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++)&#123;</span><br><span class="line">    app.data.i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The component of the above instance will trigger a <code>10000</code> component view update in version 1.0-beta.1, and it will only be updated once, the last one in version 1.0.0+.</p><h4 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick"></a>nextTick</h4><p>But that means we can’t use <code>innerHTML</code> to get the content in the component, because we can’t detect when it’s finished updating.</p><p><br></p><p>Although Ale encourages developers to think alongside data-driven thinking. But I have to admit that sometimes you do need to get the component’s <code>innerHTML</code>. At this point you can use the <code>Ale.nextTick</code> function to add a callback function to Ale’s asynchronous DOM update queue:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Ale.nextTick(function()&#123;</span><br><span class="line">    /* Add a callback function as a parameter here */</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>At this point you can get the <code>innerHTML</code> of the component:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Ale.nextTick(function()&#123;</span><br><span class="line">    document.querySelector(&quot;#app&quot;).innerHTML;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="Advanced"><a href="#Advanced" class="headerlink" title="Advanced"></a>Advanced</h4><p>When you update components dynamically, Ale first checks to see if the asynchronous update queue has been created.</p><ul><li><p>If the queue has already been created, Ale will update the storage component to a queue and wait for the current queue update to complete before updating.</p></li><li><p>If the queue is not created, Ale will directly create an update queue to complete the update.</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Async-DOM&quot;&gt;&lt;a href=&quot;#Async-DOM&quot; class=&quot;headerlink&quot; title=&quot;Async DOM&quot;&gt;&lt;/a&gt;Async DOM&lt;p class=&quot;v100-add&quot;&gt;&lt;/p&gt;&lt;/h1&gt;&lt;h3 id=&quot;Introduction&quot;
      
    
    </summary>
    
      <category term="v1" scheme="http://www.alejs.org/categories/v1/"/>
    
    
  </entry>
  
  <entry>
    <title>Watch</title>
    <link href="http://www.alejs.org/guide/v1/ComponentWatch/"/>
    <id>http://www.alejs.org/guide/v1/ComponentWatch/</id>
    <published>2019-01-13T02:23:28.470Z</published>
    <updated>2019-01-13T02:25:39.904Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Watch"><a href="#Watch" class="headerlink" title="Watch"></a>Watch<div class="v100-add"></div></h1><h3 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h3><p>The <code>Watch</code> parameter is strictly a specification that developers (especially plug-in developers) should follow.</p><p>It is used to interact with plugins. That is, the plugin can arbitrarily call any information that exists in the <code>Watch</code> parameter.</p><h4 id="Plugin-user"><a href="#Plugin-user" class="headerlink" title="Plugin user"></a>Plugin user</h4><p>You only need to add a parameter called <code>watch</code> when defining the component:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Ale(&quot;test&quot;, &#123;</span><br><span class="line">    /* ... */</span><br><span class="line">    watch: &#123;</span><br><span class="line">        /* Add information that needs to interact with the plugin here. */</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>For details on the specific <code>watch</code> parameter, please see the tutorial documentation for the plugin used.</p><h4 id="Plugin-developer"><a href="#Plugin-developer" class="headerlink" title="Plugin developer"></a>Plugin developer</h4><p>If you haven’t seen the <a href="/guide/v1/plugin/">plugin</a> tutorial, please visit this tutorial first.</p><p><br></p><p>When you inject any component, you can get the <code>watch</code> property of the component by returning the <code>watch</code> property inside the ale component object:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Ale.plugin.inject(function(obj)&#123;</span><br><span class="line">    /* Obj is the ale component object when rendered by the registered component */</span><br><span class="line">    console.log(obj.watch);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Watch&quot;&gt;&lt;a href=&quot;#Watch&quot; class=&quot;headerlink&quot; title=&quot;Watch&quot;&gt;&lt;/a&gt;Watch&lt;div class=&quot;v100-add&quot;&gt;&lt;/div&gt;&lt;/h1&gt;&lt;h3 id=&quot;Start&quot;&gt;&lt;a href=&quot;#Start&quot; c
      
    
    </summary>
    
      <category term="v1" scheme="http://www.alejs.org/categories/v1/"/>
    
    
  </entry>
  
  <entry>
    <title>Static Data</title>
    <link href="http://www.alejs.org/guide/v1/ComponentStaticData/"/>
    <id>http://www.alejs.org/guide/v1/ComponentStaticData/</id>
    <published>2019-01-13T02:21:53.344Z</published>
    <updated>2019-01-13T02:23:19.866Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Static-Data"><a href="#Static-Data" class="headerlink" title="Static Data"></a>Static Data<div class="v100-add"></div></h1><h3 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h3><p>In the <a href="/guide/v1/ComponentData/">Data</a> article, you have learned the <code>Data</code> property. If you haven’t studied yet, please learn Data first.</p><h4 id="Detailed-difference"><a href="#Detailed-difference" class="headerlink" title="Detailed difference"></a>Detailed difference</h4><p>The most important difference between <code>Data</code> and <code>Static Data</code> is that the view will not be refreshed when the static data is updated [Please enter <code>app.staticData.i = &quot;new value&quot;</code> in the console to see if the example below will Update it!]:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Ale(<span class="string">"test"</span>, &#123;</span><br><span class="line">    template: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"The value of data i on the view is:"</span> + <span class="keyword">this</span>.staticData.i;</span><br><span class="line">    &#125;,</span><br><span class="line">    staticData: &#123;</span><br><span class="line">        i: <span class="string">"Hello"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><div class="demo" id="app"></div><h4 id="Advanced"><a href="#Advanced" class="headerlink" title="Advanced"></a>Advanced</h4><p>Similarly, static data also supports function types:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">staticData: function()&#123;</span><br><span class="line">    /* Need to use return */</span><br><span class="line">    return &#123;</span><br><span class="line">        i: &quot;Hello&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><script src="../../../../js/Ale.v1.min.js"></script><script>Ale("test", {    template: function(){        return "The value of data i on the view is:" + this.staticData.i;    },    staticData: {        i: "Hello"    }})var app = Ale.render("test", {    el: "#app"})</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Static-Data&quot;&gt;&lt;a href=&quot;#Static-Data&quot; class=&quot;headerlink&quot; title=&quot;Static Data&quot;&gt;&lt;/a&gt;Static Data&lt;div class=&quot;v100-add&quot;&gt;&lt;/div&gt;&lt;/h1&gt;&lt;h3 id=&quot;S
      
    
    </summary>
    
      <category term="v1" scheme="http://www.alejs.org/categories/v1/"/>
    
    
  </entry>
  
  <entry>
    <title>Proxy</title>
    <link href="http://www.alejs.org/guide/v1/ComponentProxy/"/>
    <id>http://www.alejs.org/guide/v1/ComponentProxy/</id>
    <published>2019-01-13T02:14:14.724Z</published>
    <updated>2019-01-13T02:21:42.651Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy<div class="v100-add"></div></h1><h3 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h3><p>In 1.0.0, we abolished the debug parameter and added a function similar to the <code>proxy</code> parameter, but with a slightly different way of using it:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">proxy: &#123;</span><br><span class="line">    setter: <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The proxy parameter supports the <code>setter</code> and <code>getter</code> functions to proxy data settings and fetches. You can add <code>proxy</code> when the component is defined, or you can add it dynamically when rendering.</p><h4 id="setter"><a href="#setter" class="headerlink" title="setter"></a>setter</h4><p>The setter parameter needs to be a function and needs to receive one parameter:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setter: <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>obj</code> parameter has the following key values:</p><ul><li>type[Type of the data. Normal stands for normal data, static stands for static data.</li><li>key [name of the data]</li><li>val [new value set]</li><li>preventUpdating [function, call to prevent component view update, but does not prevent component data value update]</li></ul><p id="app" class="demo"></p><p>At the same time, you need to use the <code>return</code> keyword to return the new value set, otherwise the component data value will be updated to <code>undefined</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">setter: <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> obj.val;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Or you can return the value you set.</span></span><br><span class="line"><span class="comment">        return "Don't let you update the data!";</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Of course, you can also use the <code>preventUpdating</code> function to prevent component updates from being updated, but you can’t prevent component data values from being updated (can be blocked by return):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">setter: function(obj)&#123;</span><br><span class="line">    obj.preventUpdating();</span><br><span class="line">    return obj.val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p class="demo" id="app2"></p><h4 id="getter"><a href="#getter" class="headerlink" title="getter"></a>getter</h4><p>Similarly, the getter parameter needs to be a function and also needs to receive a parameter.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getter: <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>obj</code> parameter also has the following key values:</p><ul><li>type[Type of the data. Normal stands for normal data, static stands for static data.</li><li>key [name of the data]</li><li>val [value obtained]</li><li>preventUpdating [function, call to prevent component view update, but does not prevent component data value update] <span style="color: red"> [invalid! Because getters don’t cause view updates! 】</span></li></ul><script src="../../../../js/Ale.v1.min.js"></script><script>Ale('test', {    template: "Reset the value of app.data.i and you can see obj in the console",    proxy: {        setter: function(obj){            console.log(obj);        }    },    data: {        i: 0    }})var app = Ale.render("test", {    el: "#app"})Ale('test2', {    template: function(){        return "Reset the value of app2.data.i, only the value of app2.data.i will be updated, the view will not update the value of <br>app2.data.i on the view:" + this.data.i;    },    proxy: {        setter: function(obj){            obj.preventUpdating();            return obj.val;        }    },    data: {        i: 0    }})var app2 = Ale.render("test2", {    el: "#app2"})</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Proxy&quot;&gt;&lt;a href=&quot;#Proxy&quot; class=&quot;headerlink&quot; title=&quot;Proxy&quot;&gt;&lt;/a&gt;Proxy&lt;div class=&quot;v100-add&quot;&gt;&lt;/div&gt;&lt;/h1&gt;&lt;h3 id=&quot;Start&quot;&gt;&lt;a href=&quot;#Start&quot; c
      
    
    </summary>
    
      <category term="v1" scheme="http://www.alejs.org/categories/v1/"/>
    
    
  </entry>
  
  <entry>
    <title>Data type decision</title>
    <link href="http://www.alejs.org/guide/v1/ComponentDataType/"/>
    <id>http://www.alejs.org/guide/v1/ComponentDataType/</id>
    <published>2019-01-10T12:40:29.229Z</published>
    <updated>2019-01-11T01:38:48.199Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Data-type-decision"><a href="#Data-type-decision" class="headerlink" title="Data type decision"></a>Data type decision<div class="v100-add"></div></h1><h3 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h3><p>We can use a <code>dataType</code> property to make it easy for Ale.js to automatically determine if the data type is accurate:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Ale(<span class="string">"test"</span>, &#123;</span><br><span class="line">    template: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.data.key + <span class="keyword">this</span>.staticData.val;</span><br><span class="line">    &#125;,</span><br><span class="line">    data: &#123;</span><br><span class="line">        key: <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    staticData: &#123;</span><br><span class="line">        val: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    dataType: &#123;</span><br><span class="line">        <span class="comment">/* Add dataType here */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Inside the dataType you need to set a <code>data</code> or <code>staticData</code> to specify which type of data to make the decision in:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dataType: &#123;</span><br><span class="line">    data: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    staticData: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>For example, we only accept parameters of numeric type: [If it is a constructor type, then ale will use the <code>instanceOf</code> keyword to determine]</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dataType: &#123;</span><br><span class="line">    data: &#123;</span><br><span class="line">        key: <span class="built_in">Number</span></span><br><span class="line">    &#125;,</span><br><span class="line">    staticData: &#123;</span><br><span class="line">        val: <span class="built_in">Number</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Or: [If it is a string type, then ale will use the <code>typeof</code> keyword to determine]</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dataType: &#123;</span><br><span class="line">    data: &#123;</span><br><span class="line">        key: <span class="string">"number"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    staticData: &#123;</span><br><span class="line">        val: <span class="string">"number"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p class="demo" id="app"></p><script src="../../../../js/Ale.v1.min.js"></script><script>Ale("test", {    template: function(){        return "Please change the value of app.data.key! Then check if there will be an error in the console.";    },    data: {        key: 1    },    staticData: {        val: 0    },    dataType: {        data: {            key: "number"        },        staticData: {            val: "number"        }    }})var app = Ale.render("test", {    el: "#app"})</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Data-type-decision&quot;&gt;&lt;a href=&quot;#Data-type-decision&quot; class=&quot;headerlink&quot; title=&quot;Data type decision&quot;&gt;&lt;/a&gt;Data type decision&lt;div class=&quot;v1
      
    
    </summary>
    
      <category term="v1" scheme="http://www.alejs.org/categories/v1/"/>
    
    
  </entry>
  
  <entry>
    <title>Debug mode</title>
    <link href="http://www.alejs.org/guide/v1/ComponentDebug/"/>
    <id>http://www.alejs.org/guide/v1/ComponentDebug/</id>
    <published>2018-12-20T23:42:17.480Z</published>
    <updated>2019-01-05T01:55:02.325Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Debug-mode"><a href="#Debug-mode" class="headerlink" title="Debug mode"></a>Debug mode</h1><h3 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h3><p>When you have a huge front-end system, debugging can become a nightmare if there is no way to monitor data changes.</p><p>The occurrence of the <code>debug</code> parameter solves this problem well. You can add the <code>debug</code> parameter to the component <code>definition</code> or <code>render</code> (the debug parameter when rendering will completely override the debug parameter set at the time of definition):</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Added when defining */</span></span><br><span class="line">Ale(<span class="string">"test"</span>, &#123;</span><br><span class="line">    <span class="comment">/* ...... */</span></span><br><span class="line">    debug: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Or add it dynamically when rendering */</span></span><br><span class="line">Ale.render(<span class="string">"test"</span>, &#123;</span><br><span class="line">    <span class="comment">/* ...... */</span></span><br><span class="line">    debug: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The <code>debug</code> parameter has two built-in functions: <code>setter</code> and <code>getter</code>, which monitor the setting and getting of the component data respectively <strong>(where the setter and getter each require a parameter to receive the value)</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Ale(<span class="string">"test"</span>, &#123;</span><br><span class="line">    <span class="comment">/* ...... */</span></span><br><span class="line">    debug: &#123;</span><br><span class="line">        setter: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"You set me up as: "</span>+val);</span><br><span class="line">        &#125;,</span><br><span class="line">        getter: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"You got me: "</span>+val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p class="demo" id="app"></p><p>Above example code:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Ale(<span class="string">"test"</span>, &#123;</span><br><span class="line">    template: <span class="string">"Get or reset the value of app.data.data1 in the console, then view the output in the console"</span>,</span><br><span class="line">    debug: &#123;</span><br><span class="line">        setter: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"You set me up as: "</span>+val);</span><br><span class="line">        &#125;,</span><br><span class="line">        getter: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"You got me: "</span>+val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    data: &#123;</span><br><span class="line">        data1: <span class="string">"Hello"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Ale.render(<span class="string">"test"</span>, &#123;</span><br><span class="line">    el: <span class="string">"#app"</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><script src="../../../../js/Ale.min.js"></script><script>Ale("test", {    template: "Get or reset the value of app.data.data1 in the console, then view the output in the console",    debug: {        setter: function(val){            console.log("You set me up as: "+val);        },        getter: function(val){            console.log("You got me: "+val);        }    },    data: {        data1: "Hello"    }})Ale.render("test", {    el: "#app"})</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Debug-mode&quot;&gt;&lt;a href=&quot;#Debug-mode&quot; class=&quot;headerlink&quot; title=&quot;Debug mode&quot;&gt;&lt;/a&gt;Debug mode&lt;/h1&gt;&lt;h3 id=&quot;Start&quot;&gt;&lt;a href=&quot;#Start&quot; class=&quot;he
      
    
    </summary>
    
      <category term="v1" scheme="http://www.alejs.org/categories/v1/"/>
    
    
  </entry>
  
  <entry>
    <title>Component object</title>
    <link href="http://www.alejs.org/guide/v1/ComponentObj/"/>
    <id>http://www.alejs.org/guide/v1/ComponentObj/</id>
    <published>2018-12-20T23:41:25.666Z</published>
    <updated>2019-01-13T02:36:20.438Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Component-object"><a href="#Component-object" class="headerlink" title="Component object"></a>Component object</h1><h3 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h3><p>Whenever you <code>render</code> a component, Ale will return a <code>Ale component object</code>, you can define a variable to receive it:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Define a variable to receive an Ale component object */</span></span><br><span class="line"><span class="keyword">var</span> app = Ale.render(<span class="string">"test"</span>, &#123;</span><br><span class="line">    <span class="comment">/* ...... */</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p id="app" class="demo"></p><p>Let’s click on the example above and you will see it output its own <code>Ale component object</code> in the console.</p><h3 id="Advanced"><a href="#Advanced" class="headerlink" title="Advanced"></a>Advanced</h3><p>But this creates a problem. If our component needs dynamic rendering, how do we get its <code>Ale component object</code>?</p><p>Very simple, you only need to use the <code>this</code> keyword in the properties of the support function to get:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Define a component */</span></span><br><span class="line">Ale(<span class="string">"test"</span>, &#123;</span><br><span class="line">    life: &#123;</span><br><span class="line">        mounting: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>) <span class="comment">/* Here this refers to the Ale component object after rendering is completed. */</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>In the above example, you may not understand the role of the <code>life</code> attribute, but we are just showing you how to use it. For details, please continue to view the tutorial!</p><p>Currently all the properties of the supported function:</p><ul><li>template <strong>(1.0.0 before the <code>template</code> property is automatically bound to <code>this.data</code>, and in version 1.0.0 and later, using the <code>this</code> code in the template property refers to the ale component after rendering. The object, which is <code>this</code> [but you can only access the data, staticData, methods properties of the ale component object])</strong>:</li><li>life <strong>(the life attribute itself does not support functions, but its internal properties all support functions)</strong></li><li>debug <strong>(The debug property itself does not support functions, but its internal properties all support functions. <span style="color:red"> However, note that the internal function of debug <em>will not</em> bind this</span>)</strong></li><li>proxy <strong>(The proxy property itself does not support functions, but its internal properties all support functions.)</strong></li></ul><script src="../../../../js/Ale.v1.min.js"></script><script>Ale("aleComObj", {    template: "<button onclick='console.log(app)'>Click me to output my: Ale component object in the console</button>"})var app = Ale.render("aleComObj", {    el: "#app"})</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Component-object&quot;&gt;&lt;a href=&quot;#Component-object&quot; class=&quot;headerlink&quot; title=&quot;Component object&quot;&gt;&lt;/a&gt;Component object&lt;/h1&gt;&lt;h3 id=&quot;Start&quot;&gt;&lt;a
      
    
    </summary>
    
      <category term="v1" scheme="http://www.alejs.org/categories/v1/"/>
    
    
  </entry>
  
  <entry>
    <title>Composite component</title>
    <link href="http://www.alejs.org/guide/v1/ComponentImport/"/>
    <id>http://www.alejs.org/guide/v1/ComponentImport/</id>
    <published>2018-12-20T12:27:40.415Z</published>
    <updated>2019-01-11T00:01:24.171Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Composite-component"><a href="#Composite-component" class="headerlink" title="Composite component"></a>Composite component</h1><h3 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h3><p>Ale allows you to bind any component with the <code>imports</code> property, and the new component will become a <code>composite component</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Define a component called test-1 */</span></span><br><span class="line">Ale(<span class="string">"test-1"</span>, &#123;</span><br><span class="line">    template: <span class="string">"Hello"</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Define a component named test and then import test-1 */</span></span><br><span class="line">Ale(<span class="string">"test"</span>, &#123;</span><br><span class="line">    imports: [<span class="string">"test-1"</span>], <span class="comment">/* Need to be an array here */</span></span><br><span class="line">    template: <span class="string">"World"</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Once complete, the <code>test</code> component becomes a composite component.</p><p>So now if we render the <code>test</code> component, it will only output <code>World</code> instead of the <code>HelloWorld</code> we need. At this point we can add the <code>test-1</code> component using the custom tag in the template properties of the <code>test</code> component:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Ale(<span class="string">"test"</span>, &#123;</span><br><span class="line">    imports: [<span class="string">"test-1"</span>],</span><br><span class="line">    template: <span class="string">"&lt;test-1/&gt;World"</span> <span class="comment">/* Note that here we render the test-1 component using the &lt;test-1/&gt; format. */</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Among them, we use the <code>&lt;test-1/&gt;</code> format to render the test-1 component, then it should be noted that the custom label can only be used for this format, <strong>even a space can not be added!</strong></p><p>Now let’s render this component:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Ale.render(<span class="string">"test"</span>, &#123;</span><br><span class="line">    el: <span class="string">"#app"</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p class="demo" id="app"></p><p>Already working, right? In fact, you can not only include a single component, but also include a composite component:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Define a component called test-1 */</span></span><br><span class="line">Ale(<span class="string">"test-1"</span>, &#123;</span><br><span class="line">    template: <span class="string">"Hello"</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Define a component called test-2 */</span></span><br><span class="line">Ale(<span class="string">"test-2"</span>, &#123;</span><br><span class="line">    imports: [<span class="string">"test-1"</span>],</span><br><span class="line">    template: <span class="string">"&lt;test-1/&gt; "</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Define a component named test and then import test-2 */</span></span><br><span class="line">Ale(<span class="string">"test"</span>, &#123;</span><br><span class="line">    imports: [<span class="string">"test-2"</span>],</span><br><span class="line">    template: <span class="string">"&lt;test-2/&gt;World"</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p class="demo" id="app2"></p><h3 id="Advanced"><a href="#Advanced" class="headerlink" title="Advanced"></a>Advanced</h3><p>Composite components are compared to normal (single) components:</p><ul><li>The entire composite component shares a <code>data</code>. That is, there is no hierarchical relationship between composite components, and any component can manipulate data from all other components. <strong>(In addition, according to the order in which imports are imported, data of the same name will overwrite the previous data of the same name)</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Define a component called test-1 */</span></span><br><span class="line">Ale(<span class="string">"test-1"</span>, &#123;</span><br><span class="line">    template: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.data.h; <span class="comment">/* Here access to the data of the test component */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Define a component called test-2 */</span></span><br><span class="line">Ale(<span class="string">"test-2"</span>, &#123;</span><br><span class="line">    imports: [<span class="string">"test-1"</span>],</span><br><span class="line">    template: <span class="string">"&lt;test-1/&gt; "</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Define a component named test and then import test-2 */</span></span><br><span class="line">Ale(<span class="string">"test"</span>, &#123;</span><br><span class="line">    imports: [<span class="string">"test-2"</span>],</span><br><span class="line">    template: <span class="string">"&lt;test-2/&gt;World"</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        h: <span class="string">"Hello"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p class="demo" id="app3"></p><ul><li><p>The entire composite component shares a single method.</p></li><li><p>The entire composite component shares a proxy.</p></li><li><p>The entire composite component shares a life.</p></li></ul><h4 id="Including-local-components"><a href="#Including-local-components" class="headerlink" title="Including local components"></a>Including local components<div class="v100-add"></div></h4><p>If you want to include a partial component, simply reference the <code>Ale local component generation object</code> in the <code>imports</code> property.</p><p>At the same time you need to add a <code>name</code> attribute to the local component, otherwise Ale has no way to distinguish the name of the local component [default is unknown]:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Define a local component called test-1 */</span></span><br><span class="line"><span class="keyword">var</span> test1 = Ale(&#123;</span><br><span class="line">    template: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.data.h; <span class="comment">/* Here access to the data of the test component */</span></span><br><span class="line">    &#125;,</span><br><span class="line">    name: <span class="string">"test1"</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Define a component called test-2 */</span></span><br><span class="line"><span class="keyword">var</span> test2 = Ale(&#123;</span><br><span class="line">    imports: [test1],</span><br><span class="line">    template: <span class="string">"&lt;test1/&gt; "</span>,</span><br><span class="line">    name: <span class="string">"test2"</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Define a component named test and then import test-2 */</span></span><br><span class="line"><span class="keyword">var</span> test = Ale(&#123;</span><br><span class="line">    imports: [test2],</span><br><span class="line">    template: <span class="string">"&lt;test2/&gt;World"</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        h: <span class="string">"Hello"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">test.render(&#123;</span><br><span class="line">    el: <span class="string">"#app"</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p class="demo" id="app4"></p><script src="../../../../js/Ale.v1.min.js"></script><script>Ale("test-1", {    template: "Hello"})Ale("test", {    imports: ["test-1"],    template: "<test-1/>World"})Ale.render("test", {    el: "#app"})Ale("test-2", {    imports: ["test-1"],    template: "<test-1/> "})Ale("test-3", {    imports: ["test-2"],    template: "<test-2/>World"})Ale.render("test-3", {    el: "#app2"})Ale("test-4", {    template: function(){        return this.data.h;    }})Ale("test-5", {    imports: ["test-4"],    template: "<test-4/> "})Ale("test-6", {    imports: ["test-5"],    template: "<test-5/>World",    data: {        h: "Hello"    }})Ale.render("test-6", {    el: "#app3"})var test1 = Ale({    template: function(){        return this.data.h;    },    name: "test1"})var test2 = Ale({    imports: [test1],    template: "<test1/> ",    name: "test2"})var test = Ale({    imports: [test2],    template: "<test2/>World",    data: {        h: "Hello"    }})test.render({    el: "#app4"})</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Composite-component&quot;&gt;&lt;a href=&quot;#Composite-component&quot; class=&quot;headerlink&quot; title=&quot;Composite component&quot;&gt;&lt;/a&gt;Composite component&lt;/h1&gt;&lt;h3 i
      
    
    </summary>
    
      <category term="v1" scheme="http://www.alejs.org/categories/v1/"/>
    
    
  </entry>
  
  <entry>
    <title>Method</title>
    <link href="http://www.alejs.org/guide/v1/ComponentMethod/"/>
    <id>http://www.alejs.org/guide/v1/ComponentMethod/</id>
    <published>2018-12-20T07:28:53.924Z</published>
    <updated>2019-01-11T00:50:49.109Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h1><h4 id="1-0-0Updated-content"><a href="#1-0-0Updated-content" class="headerlink" title="1.0.0Updated content:"></a>1.0.0Updated content:</h4><p>In version 1.0.0 and later, use <code>this</code> in any function in the <code>methods</code> parameter to refer to the ale component object after rendering.</p><p><br></p><p>Also, in version 1.0.0 and later, you can also dynamically set or override the <code>methods</code> property when the component is rendered.</p><h3 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h3><p>Let’s follow the tutorial for the component <a href="/guide/v1/ComponentLife/">life</a>, or an example of a timer:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Ale(<span class="string">"timer"</span>, &#123;</span><br><span class="line">    template: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&lt;span&gt;Now Time: &lt;/span&gt;"</span> + <span class="keyword">this</span>.data.time</span><br><span class="line">    &#125;,</span><br><span class="line">    data: &#123;</span><br><span class="line">        time: <span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleTimeString()</span><br><span class="line">    &#125;,</span><br><span class="line">    life: &#123;</span><br><span class="line">        mounting: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="comment">/* Need to use the arrow function here, because this will not be bound */</span></span><br><span class="line">            <span class="keyword">this</span>.timer = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.data.time = <span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleTimeString();</span><br><span class="line">            &#125;, <span class="number">1000</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        unmounting: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            clearInterval(<span class="keyword">this</span>.timer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Ale.render(<span class="string">"timer"</span>, &#123;</span><br><span class="line">    el: <span class="string">"#app"</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p></p><p class="demo" id="app">&lt;/p</p><p>I don’t know if you noticed that our timer is added directly to <code>this</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Note here, directly bound to the Ale component object (this) */</span></span><br><span class="line"><span class="keyword">this</span>.timer = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.data.time = <span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleTimeString();</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p>However, if we are not careful, the added function has the same name as the built-in function in <code>Ale Component Object</code>, then there will be some unknown bugs.</p><p>At this point, we recommend that you add the function to the built-in property <code>methods</code> in the <code>Ale component object</code>!</p><p>Let’s modify the code:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Ale(<span class="string">"timer"</span>, &#123;</span><br><span class="line">    template: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&lt;span&gt;Now Time: &lt;/span&gt;"</span> + <span class="keyword">this</span>.data.time</span><br><span class="line">    &#125;,</span><br><span class="line">    data: &#123;</span><br><span class="line">        time: <span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleTimeString()</span><br><span class="line">    &#125;,</span><br><span class="line">    life: &#123;</span><br><span class="line">        mounting: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="comment">/* Note here, binding methods on */</span></span><br><span class="line">            <span class="keyword">this</span>.methods.timer = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.data.time = <span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleTimeString();</span><br><span class="line">            &#125;, <span class="number">1000</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        unmounting: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            clearInterval(<span class="keyword">this</span>.methods.timer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The instance is executable normally.</p><p>At the same time, you can also set <code>methods</code> when the component is defined:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Ale(<span class="string">"test"</span>, &#123;</span><br><span class="line">    template: <span class="string">"test"</span>,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        <span class="comment">/* Define a function called testFn */</span></span><br><span class="line">        testFn: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            alert(<span class="string">"test!"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    life: &#123;</span><br><span class="line">        mounting: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="comment">/* 动态调用它 */</span></span><br><span class="line">            <span class="keyword">this</span>.methods.testFn();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Advanced"><a href="#Advanced" class="headerlink" title="Advanced"></a>Advanced</h3><p>Like the <code>data</code> property, the <code>methods</code> property is automatically bound to all elements and child elements of the component, accessible via <code>this.methods</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">template: <span class="string">"&lt;span onclick='this.methods.testFn()'&gt;Click me!&lt;/span&gt;"</span></span><br></pre></td></tr></table></figure><div class="demo" id="app2"></div><script src="../../../../js/Ale.v1.min.js"></script><script>Ale("timer", {    template: function(){        return "<span>Now Time: </span>" + this.data.time    },    data: {        time: new Date().toLocaleTimeString()    },    life: {        mounting: function(){            this.timer = setInterval(() => {                this.data.time = new Date().toLocaleTimeString();            }, 1000);        },        unmounting: function(){            clearInterval(this.timer);        }    }})Ale.render("timer", {    el: "#app"})Ale("test", {    template: "<span onclick='this.methods.testFn()'>Click me!</span>",    methods: {        testFn: function(){            alert("test!")        }    }})Ale.render("test", {    el: "#app2"})</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Method&quot;&gt;&lt;a href=&quot;#Method&quot; class=&quot;headerlink&quot; title=&quot;Method&quot;&gt;&lt;/a&gt;Method&lt;/h1&gt;&lt;h4 id=&quot;1-0-0Updated-content&quot;&gt;&lt;a href=&quot;#1-0-0Updated-cont
      
    
    </summary>
    
      <category term="v1" scheme="http://www.alejs.org/categories/v1/"/>
    
    
  </entry>
  
  <entry>
    <title>In-depth responsive principle</title>
    <link href="http://www.alejs.org/guide/v1/deepInRespond/"/>
    <id>http://www.alejs.org/guide/v1/deepInRespond/</id>
    <published>2018-12-20T06:47:59.009Z</published>
    <updated>2019-01-05T01:55:27.100Z</updated>
    
    <content type="html"><![CDATA[<h1 id="In-depth-responsive-principle"><a href="#In-depth-responsive-principle" class="headerlink" title="In-depth responsive principle"></a>In-depth responsive principle</h1><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>Ale adds setters and getters to objects using ES5’s new <code>defineProperty</code> property. At the same time Object.defineProperty is a feature in ES5 that cannot be shim, not syntactic sugar, which is why Ale does not support IE8 and lower browsers.</p><h3 id="Limit"><a href="#Limit" class="headerlink" title="Limit"></a>Limit</h3><p>Affected by modern JavaScript (and <code>Object.observe</code> has also been deprecated), Ale <strong>cannot detect the addition or deletion of object properties</strong>. Since Ale will perform a getter/setter conversion procedure on the property when it initializes the instance, the property must exist on the data object in order for Ale to convert it so that it is responsive. E.g:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">    a: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data.a = <span class="number">2</span>; <span class="comment">/* Responsive */</span></span><br><span class="line"></span><br><span class="line">data.b = <span class="number">2</span>; <span class="comment">/* Non-responsive */</span></span><br></pre></td></tr></table></figure><p>So when you set the data, <strong>Required</strong> sets the value that needs to have responsive effect data, even if it’s just a null value:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="string">''</span> <span class="comment">/* Need to be set to empty here */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Specific"><a href="#Specific" class="headerlink" title="Specific"></a>Specific</h3><p>When you trigger the setter (when the operation data is updated), Ale first updates the data, then calculates the updated attribute results and updates them in a loop.</p><p><br></p><p>Among them, the <code>template</code> attribute is special. When the data update is completed, Ale will call the function of <code>diff</code> algorithm and generate a <code>pseudo DOM structure</code>. Ale’s diff algorithm will compare <code>pseudo DOM structure</code> and <code>reality. The difference between DOM structure</code> and only update DOM elements with differences.</p><p><br></p><p>In addition, the diff comparison will only be done in the peer DOM. Once a level change occurs, Ale will not continue to compare, but update the entire layer directly. This can effectively increase the contrast performance of diff and reduce the time of comparison.</p><p><br></p><p>Another point is that Ale’s <code>diff</code> algorithm only compares whether the element’s <code>content</code> \ <code>id</code> \ <code>class</code> \ <code>name</code> attribute is the same, that is, when you dynamically update for example <code>onclick</code> The properties of the class, the <code>diff</code> algorithm does not compare the differences, and the elements are not updated. At this point you can manually turn off the <code>diff</code> algorithm when the element is updated and open it when the element update is complete!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;In-depth-responsive-principle&quot;&gt;&lt;a href=&quot;#In-depth-responsive-principle&quot; class=&quot;headerlink&quot; title=&quot;In-depth responsive principle&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="v1" scheme="http://www.alejs.org/categories/v1/"/>
    
    
  </entry>
  
  <entry>
    <title>Life</title>
    <link href="http://www.alejs.org/guide/v1/ComponentLife/"/>
    <id>http://www.alejs.org/guide/v1/ComponentLife/</id>
    <published>2018-12-20T05:48:00.629Z</published>
    <updated>2019-01-11T02:51:03.001Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Life"><a href="#Life" class="headerlink" title="Life"></a>Life</h1><h3 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h3><p>In Ale, a component has six life states, which correspond to their life cycle functions of the same name:</p><ul><li>using (when the component is used)</li><li>mounting (when the component is inserted into the real DOM)</li><li>unmounting (when the component moves out of the real DOM)</li><li>rendering (when the component is rendered)</li><li>updating (when the component is updated)</li><li>destroy (when the component is destroyed)</li><li>staticDataUpdating (when static data is updated)<div class="v100-add"></div></li></ul><p>You can add a property called <code>life</code> when defining a component and add a function to the <code>life</code> property:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Ale(<span class="string">"test"</span>, &#123;</span><br><span class="line">    template: <span class="string">"test"</span>,</span><br><span class="line">    life: &#123;</span><br><span class="line">        <span class="comment">/* Add the life attribute here, you need to be object */</span></span><br><span class="line">        <span class="comment">/* Add the using function to fire when the component is used */</span></span><br><span class="line">        using: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            alert(<span class="string">"using!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p class="demo" id="app"><button onclick="Ale.render('test',{el: '#app'})">Point me to render the test component</button></p><h3 id="Advanced"><a href="#Advanced" class="headerlink" title="Advanced"></a>Advanced</h3><p>In addition to the using function, other functions will automatically bind the Ale component object. If you need to change the data, use the form <code>this.data</code> to change:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Ale(<span class="string">"test"</span>, &#123;</span><br><span class="line">    template: <span class="string">"test"</span>,</span><br><span class="line">    life: &#123;</span><br><span class="line">        <span class="comment">/* Add the life attribute here, you need to be object */</span></span><br><span class="line">        <span class="comment">/* Add the rendering function to fire when the component is rendered */</span></span><br><span class="line">        rendering: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.data); <span class="comment">/* print data */</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Online-instance"><a href="#Online-instance" class="headerlink" title="Online instance"></a>Online instance</h3><p>Let’s make a timer, output the current time, update every second: <a href="https://jsfiddle.net/billdong/y5p327vq/2/" target="_blank" rel="noopener">view on jsfiddle</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Ale(<span class="string">"timer"</span>, &#123;</span><br><span class="line">    template: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Now Time: "</span> + <span class="keyword">this</span>.data.time</span><br><span class="line">    &#125;,</span><br><span class="line">    data: &#123;</span><br><span class="line">        time: <span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleTimeString()</span><br><span class="line">    &#125;,</span><br><span class="line">    life: &#123;</span><br><span class="line">        mounting: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="comment">/* Need to use the arrow function here, because this will not be bound */</span></span><br><span class="line">            <span class="keyword">this</span>.timer = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.data.time = <span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleTimeString();</span><br><span class="line">            &#125;, <span class="number">1000</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        unmounting: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            clearInterval(<span class="keyword">this</span>.timer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Ale.render(<span class="string">"timer"</span>, &#123;</span><br><span class="line">    el: <span class="string">"#app"</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p class="demo" id="app2"></p><p>The upper timer does not apply Ale’s built-in <code>diff</code> algorithm because you need to wrap elements that don’t need to be updated with DOM tags:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">template: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"&lt;span&gt;Now Time: &lt;/span&gt;"</span> + <span class="keyword">this</span>.data.time</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p class="demo" id="app3"></p><p>Now you can open the console and compare the refresh of the two instance DOMs. You will find that the <code>Now Time:</code> of this instance is not updated.</p><script src="../../../../js/Ale.v1.min.js"></script><script>Ale("test", {    template: "test",    life: {        using: function(){            alert("using!");        }    }})Ale("timer", {    template: function(){        return "Now Time: " + this.data.time    },    data: {        time: new Date().toLocaleTimeString()    },    life: {        mounting: function(){            this.timer = setInterval(() => {                this.data.time = new Date().toLocaleTimeString();            }, 1000);        },        unmounting: function(){            clearInterval(this.timer);        }    }})Ale.render("timer", {    el: "#app2"})Ale("timer2", {    template: function(){        return "<span>Now Time: </span>" + this.data.time    },    data: {        time: new Date().toLocaleTimeString()    },    life: {        mounting: function(){            this.timer = setInterval(() => {                this.data.time = new Date().toLocaleTimeString();            }, 1000);        },        unmounting: function(){            clearInterval(this.timer);        }    }})Ale.render("timer2", {    el: "#app3"})</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Life&quot;&gt;&lt;a href=&quot;#Life&quot; class=&quot;headerlink&quot; title=&quot;Life&quot;&gt;&lt;/a&gt;Life&lt;/h1&gt;&lt;h3 id=&quot;Start&quot;&gt;&lt;a href=&quot;#Start&quot; class=&quot;headerlink&quot; title=&quot;Start&quot;&gt;
      
    
    </summary>
    
      <category term="v1" scheme="http://www.alejs.org/categories/v1/"/>
    
    
  </entry>
  
  <entry>
    <title>Data</title>
    <link href="http://www.alejs.org/guide/v1/ComponentData/"/>
    <id>http://www.alejs.org/guide/v1/ComponentData/</id>
    <published>2018-12-20T02:33:09.313Z</published>
    <updated>2019-01-10T12:40:09.527Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Data"><a href="#Data" class="headerlink" title="Data"></a>Data</h1><h3 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h3><p>In the <a href="/guide/v1/ComponentFoundation/">Component Basics</a> article, I believe you have learned some basic ways to add data. If you haven’t studied this tutorial yet, please come back after learning!</p><p>In the component-based tutorial, you only learned how to add <code>data</code>. So why add dynamic <code>data</code>?</p><p><br></p><p>It’s actually very simple, because the template is static and the data is dynamic. If we change somewhere, it’s actually much simpler than changing the template!</p><p>For example, we first define a component named <code>com1</code> and then render it:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Ale(<span class="string">"com1"</span>, &#123;</span><br><span class="line">    template: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello "</span> + <span class="keyword">this</span>.data.name;</span><br><span class="line">    &#125;,</span><br><span class="line">    data: &#123;</span><br><span class="line">        name: <span class="string">"World"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Ale.render(<span class="string">"com1"</span>, &#123;</span><br><span class="line">    el: <span class="string">"#app"</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The rendering results are as follows:</p><p id="app" class="demo"></p><p>So since we know that we can modify the data dynamically, how can we modify it?</p><p><br></p><p>Quite simply, we just need to store the result returned by the <code>Ale.render</code> function (which is actually the Ale component object) into a variable:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = Ale.render(<span class="string">"com1"</span>, &#123;</span><br><span class="line">    el: <span class="string">"#app"</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Then use this variable to manipulate <code>data</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.data.name = <span class="string">"Ale.js"</span>; <span class="comment">/* Reassign */</span></span><br></pre></td></tr></table></figure><p>Now let’s type <code>app.data.name = &quot;Ale.js&quot;</code> in the console, and you’ll see the following instance dynamic update:</p><p id="app2" class="demo"></p><p>At the same time, our data will be automatically bound to all elements within the component, accessible using <code>this.data</code>, for example, we will be a component that records clicks:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Defining components */</span></span><br><span class="line">Ale(<span class="string">"counter"</span>, &#123;</span><br><span class="line">    template: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">/* Let this.data.count increase itself */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&lt;button onclick='this.data.count++'&gt;You clicked me "</span> + <span class="keyword">this</span>.data.count + <span class="string">" times."</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    data: &#123;</span><br><span class="line">        count: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Rendering component */</span></span><br><span class="line">Ale.render(<span class="string">"counter"</span>, &#123;</span><br><span class="line">    el: <span class="string">"#app"</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p class="demo" id="app3"></p><p>In fact, the data can be applied not only to the template, but also to the properties of any supported function. Of course, the properties of these bound data will be updated whenever you update the data.</p><p>What are the specific properties that can be applied to the data, please continue to view the tutorial!</p><h3 id="Advanced"><a href="#Advanced" class="headerlink" title="Advanced"></a>Advanced</h3><h4 id="About-Vue"><a href="#About-Vue" class="headerlink" title="About Vue"></a>About Vue</h4><p>If you know Vue, you will find that using Vue to set the data requires adding a function and then using return to return the required data:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="comment">/* Add data here */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Vue does this because each time the JavaScript engine copies an object, it is copied along with the object’s memory address, which causes another object to be updated when an object is updated. At this time, if we use a function to return an object each time, it is equivalent to creating a new object with a different memory address each time, there will be no such problem.</p><p><br></p><p>However, doing so will result in an increase in the amount of code you need to write, while Ale uses a deep copy to scan from the root of the object and create a brand new object layer by layer. Doing so will cause a certain performance penalty (ignoring small amounts of data), but it also reduces the amount of code you need to write.</p><p><br></p><p>If you need multiple components to share a set of data, try having one component render multiple elements at the same time in one render, or use <a href="/guide/v1/ComponentImport">composite components</a>.</p><h4 id="More"><a href="#More" class="headerlink" title="More"></a>More</h4><p>You can also set the component’s data using the format <code>app.data</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.data = &#123;</span><br><span class="line">    count: 1,</span><br><span class="line">    key: &quot;val&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Improve-performance"><a href="#Improve-performance" class="headerlink" title="Improve performance"></a>Improve performance<div class="v100-add"></div></h4><p>In version 1.0.0 (and later), we let single-component data support function types, which can significantly increase performance when there is a huge amount of data (because deep copy is not required), but if data is dynamically set during rendering, then function optimization Will have no effect:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">/* Need to use return to return */</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        count: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><script src="../../../../js/Ale.v1.min.js"></script><script>Ale("com1", {    template: function(){        return "Hello " + this.data.name;    },    data: {        name: "World"    }})Ale.render("com1", {    el: "#app"})var app = Ale.render("com1", {    el: "#app2"})Ale("counter", {    template: function(){        return "<button onclick='this.data.count++'>You clicked me " + this.data.count + " times.";    },    data: {        count: 0    }})Ale.render("counter", {    el: "#app3"})</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Data&quot;&gt;&lt;a href=&quot;#Data&quot; class=&quot;headerlink&quot; title=&quot;Data&quot;&gt;&lt;/a&gt;Data&lt;/h1&gt;&lt;h3 id=&quot;Start&quot;&gt;&lt;a href=&quot;#Start&quot; class=&quot;headerlink&quot; title=&quot;Start&quot;&gt;
      
    
    </summary>
    
      <category term="v1" scheme="http://www.alejs.org/categories/v1/"/>
    
    
  </entry>
  
  <entry>
    <title>Plugin</title>
    <link href="http://www.alejs.org/guide/v1/plugin/"/>
    <id>http://www.alejs.org/guide/v1/plugin/</id>
    <published>2018-12-20T02:21:16.555Z</published>
    <updated>2019-01-13T02:32:03.872Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Plugin"><a href="#Plugin" class="headerlink" title="Plugin"></a>Plugin</h1><h3 id="Using-plugins"><a href="#Using-plugins" class="headerlink" title="Using plugins"></a>Using plugins</h3><p>We need to load a plugin using the <code>Ale.use</code> function:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ale.use();</span><br></pre></td></tr></table></figure><p>The <code>Ale.use</code> function takes a parameter to specify the Ale plugin object to load. For example, we pass in an Ale plugin object named <code>test</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ale.use(test);</span><br></pre></td></tr></table></figure><p><code>test</code> is actually a variable. In the following sections, we will learn how to make an Ale plugin object.</p><h3 id="Making-a-plugin"><a href="#Making-a-plugin" class="headerlink" title="Making a plugin"></a>Making a plugin</h3><p>First let us define an <code>object</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Define a variable called test */</span></span><br><span class="line"><span class="keyword">var</span> test = &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If you want <code>test</code> to be an Ale plugin object, then it must have at least the <code>name</code> and <code>install</code> attributes:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test = &#123;</span><br><span class="line">    name: <span class="string">"test"</span>, <span class="comment">/* Plugin name */</span></span><br><span class="line">    install: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">/* Install function, which is called when the user uses the plugin */</span></span><br><span class="line">        alert(<span class="string">"Hello!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You can add functions or properties to the <code>letotype</code> property of the Ale object in the <code>install</code> property…</p><p>Anyway, the installer supports arbitrary JavaScript code!</p><h3 id="Online-instance"><a href="#Online-instance" class="headerlink" title="Online instance"></a>Online instance</h3><p>We have defined an Ale plugin object called <code>test</code>, now let’s install it by typing <code>Ale.use(test)</code> in the console! (Hello will be output during installation!)</p><script src="../../../../js/Ale.v1.min.js"></script><script>var test = {    name: "test",    install: function(){        alert("Hello!");    }}</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Plugin&quot;&gt;&lt;a href=&quot;#Plugin&quot; class=&quot;headerlink&quot; title=&quot;Plugin&quot;&gt;&lt;/a&gt;Plugin&lt;/h1&gt;&lt;h3 id=&quot;Using-plugins&quot;&gt;&lt;a href=&quot;#Using-plugins&quot; class=&quot;he
      
    
    </summary>
    
      <category term="v1" scheme="http://www.alejs.org/categories/v1/"/>
    
    
  </entry>
  
  <entry>
    <title>Version</title>
    <link href="http://www.alejs.org/guide/v1/version/"/>
    <id>http://www.alejs.org/guide/v1/version/</id>
    <published>2018-12-20T02:17:15.906Z</published>
    <updated>2019-01-13T02:32:25.536Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Version"><a href="#Version" class="headerlink" title="Version"></a>Version</h1><h3 id="version-attribute"><a href="#version-attribute" class="headerlink" title="version attribute"></a>version attribute</h3><p>You can get the current version information of Ale in the following way:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ale.version</span><br></pre></td></tr></table></figure><p>The highest Ale version currently on the official website is:</p><p class="demo" id="app"></p><script src="../../../../js/Ale.v1.min.js"></script><script>Ale("com1", {    template: function(){        return this.data.version;    }});Ale.render("com1", {    el: "#app",    data: {        version: Ale.version    }})</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Version&quot;&gt;&lt;a href=&quot;#Version&quot; class=&quot;headerlink&quot; title=&quot;Version&quot;&gt;&lt;/a&gt;Version&lt;/h1&gt;&lt;h3 id=&quot;version-attribute&quot;&gt;&lt;a href=&quot;#version-attribut
      
    
    </summary>
    
      <category term="v1" scheme="http://www.alejs.org/categories/v1/"/>
    
    
  </entry>
  
  <entry>
    <title>Filter</title>
    <link href="http://www.alejs.org/guide/v1/filter/"/>
    <id>http://www.alejs.org/guide/v1/filter/</id>
    <published>2018-12-20T01:38:57.764Z</published>
    <updated>2019-01-13T02:27:25.280Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h1><h3 id="filter-function"><a href="#filter-function" class="headerlink" title="filter function"></a>filter function</h3><p>The Ale function has a built-in <code>Ale.filter</code> function that filters sensitive information every time a DOM update is made.</p><p>In Ale, the filter is a queue. Each time you call the <code>Ale.filter</code> function, the filter function is automatically inserted into the queue. You can add filters this way:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* The filter function takes a parameter and you can pass in a function. But this function must have a parameter, and then return the filtered result with return */</span></span><br><span class="line">Ale.filter(<span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Filter all numbers 1 */</span></span><br><span class="line">    msg = msg.replace(<span class="regexp">/1/g</span>, <span class="string">""</span>)</span><br><span class="line">    <span class="keyword">return</span> msg;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Or you can pass in an array */</span></span><br><span class="line">Ale.filter([<span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Filter all numbers 1 */</span></span><br><span class="line">    msg = msg.replace(<span class="regexp">/1/g</span>, <span class="string">""</span>)</span><br><span class="line">    <span class="keyword">return</span> msg;</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Filter all numbers 2 */</span></span><br><span class="line">    msg = msg.replace(<span class="regexp">/2/g</span>, <span class="string">""</span>)</span><br><span class="line">    <span class="keyword">return</span> msg;</span><br><span class="line">&#125;])</span><br></pre></td></tr></table></figure><h3 id="Online-instance"><a href="#Online-instance" class="headerlink" title="Online instance"></a>Online instance</h3><p id="app" class="demo"></p><p>In the above example, we added a global filter that filters out all the numbers. Now you can type <code>app.data.str = &quot;new message123&quot;</code> in the console to see what the filter does.</p><script src="../../../../js/Ale.v1.min.js"></script><script>Ale.filter(function(msg){    return msg.replace(/0/g, "").replace(/1/g, "").replace(/2/g, "").replace(/3/g, "").replace(/4/g, "").replace(/5/g, "").replace(/6/g, "").replace(/7/g, "").replace(/8/g, "").replace(/9/g, "");})Ale("com1", {    template: function(){        return this.data.str;    }});var app = Ale.render("com1", {    el: "#app",    data: {        str: "Hello World"    }})</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Filter&quot;&gt;&lt;a href=&quot;#Filter&quot; class=&quot;headerlink&quot; title=&quot;Filter&quot;&gt;&lt;/a&gt;Filter&lt;/h1&gt;&lt;h3 id=&quot;filter-function&quot;&gt;&lt;a href=&quot;#filter-function&quot; class
      
    
    </summary>
    
      <category term="v1" scheme="http://www.alejs.org/categories/v1/"/>
    
    
  </entry>
  
  <entry>
    <title>Config</title>
    <link href="http://www.alejs.org/guide/v1/config/"/>
    <id>http://www.alejs.org/guide/v1/config/</id>
    <published>2018-12-19T11:25:50.770Z</published>
    <updated>2019-01-13T02:26:35.128Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h1><h3 id="config-function"><a href="#config-function" class="headerlink" title="config function"></a>config function</h3><p>The Ale function has a built-in <code>Ale.config</code> function to change some Ale configuration information. The configuration supported by the current config function is as follows:</p><ul><li>html <strong>(default false)</strong> [data if the HTML tag output is a node (turn off this option to prevent xss attacks, do not open easily)]</li><li>diff <strong>(default true)</strong> [Whether the diff algorithm is applied when operating the DOM (recommended applet is closed, medium and large applications need to be turned on)]</li><li>async <strong>(default true)</strong> [whether to enable asynchronous DOM (recommended)] <div class="v100-add"></div></li><li>configLock <strong>(default false)</strong> [whether the configuration information is locked (recommended after the configuration is modified)] <div class="v100-add"></div></li></ul><p>You can change one of the configurations by:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Ale.config(<span class="string">"html"</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Or */</span></span><br><span class="line"></span><br><span class="line">Ale.config(&#123;</span><br><span class="line">    html: <span class="literal">true</span>,</span><br><span class="line">    diff: <span class="literal">false</span>,</span><br><span class="line">    <span class="keyword">async</span>: <span class="literal">false</span>,</span><br><span class="line">    configLock: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Config&quot;&gt;&lt;a href=&quot;#Config&quot; class=&quot;headerlink&quot; title=&quot;Config&quot;&gt;&lt;/a&gt;Config&lt;/h1&gt;&lt;h3 id=&quot;config-function&quot;&gt;&lt;a href=&quot;#config-function&quot; class
      
    
    </summary>
    
      <category term="v1" scheme="http://www.alejs.org/categories/v1/"/>
    
    
  </entry>
  
  <entry>
    <title>Component Foundation</title>
    <link href="http://www.alejs.org/guide/v1/ComponentFoundation/"/>
    <id>http://www.alejs.org/guide/v1/ComponentFoundation/</id>
    <published>2018-12-19T09:59:24.053Z</published>
    <updated>2019-01-10T23:50:16.740Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Component-Foundation"><a href="#Component-Foundation" class="headerlink" title="Component Foundation"></a>Component Foundation</h1><h3 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h3><p>In the introductory chapter, you’ve learned some basic definitions and functions for rendering components. These foundations will not appear in this chapter. If you have not already learned some of the content, please visit the <a href="/guide/v1/Introduction/">Introduction</a> page.</p><h3 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h3><p>On the introduction page, we have some knowledge of the <strong>template</strong> property:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Define a component called com1</span></span><br><span class="line">Ale(<span class="string">"com1"</span>, &#123;</span><br><span class="line">    template: <span class="string">"HelloWorld"</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>In fact, the <strong>template</strong> property also supports receiving a function, but the specific template needs to be returned using <code>return</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Define a component called com1</span></span><br><span class="line">Ale(<span class="string">"com1"</span>, &#123;</span><br><span class="line">    template: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"HelloWorld"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Of course, you can also use ES6 syntax to define templates</span></span><br><span class="line">Ale(<span class="string">"com1"</span>, &#123;</span><br><span class="line">    template()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"HelloWorld"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Then we need to render this component:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Ale.render(<span class="string">"com1"</span>, &#123;</span><br><span class="line">    el: <span class="string">"#app"</span> <span class="comment">/* Target element selector */</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p class="demo" id="app"></p><p>So, what are the benefits of setting the <strong>template</strong> property to a function? In fact, it can automatically bind a property called <code>data</code>.</p><p>For example, we define a value named <code>name</code> in the <code>data</code> attribute and then render it:<br><strong>[Before version 1.0.0, the actual use of this refers to this.data, and the 1.0.0 version replaces this with the ale component object after rendering]<em>(if you don’t know this sentence is What do you mean, please leave it alone)</em></strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Ale(<span class="string">"com1"</span>, &#123;</span><br><span class="line">    template: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello "</span> + <span class="keyword">this</span>.data.name;</span><br><span class="line">    &#125;,</span><br><span class="line">    data: &#123;</span><br><span class="line">        name: <span class="string">"World"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Remember to use the ES6 arrow function, because the arrow function does not bind this</span></span><br><span class="line"><span class="comment">Ale("com1", &#123;</span></span><br><span class="line"><span class="comment">    template: () =&gt; &#123;</span></span><br><span class="line"><span class="comment">        return "Hello " + this.data.name; //Error!</span></span><br><span class="line"><span class="comment">    &#125;,</span></span><br><span class="line"><span class="comment">    data: &#123;</span></span><br><span class="line"><span class="comment">        name: "World"</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;);</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p class="demo" id="app2"></p><h3 id="Advanced-operation"><a href="#Advanced-operation" class="headerlink" title="Advanced operation"></a>Advanced operation</h3><h4 id="Data"><a href="#Data" class="headerlink" title="Data"></a>Data</h4><p>You can also dynamically set <code>data</code> when the component is rendered. Among them, the attribute with the same name will be reassigned:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Ale.render(<span class="string">"com1"</span>, &#123;</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        name: <span class="string">"Ale.js"</span> <span class="comment">/* Will be reassigned to Ale.js */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p class="demo" id="app3"></p><p>Of course, the same component can also be rendered multiple times:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Ale.render(<span class="string">"com1"</span>, &#123;</span><br><span class="line">    el: <span class="string">"#app"</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Ale.render(<span class="string">"com1"</span>, &#123;</span><br><span class="line">    el: <span class="string">"#app2"</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Ale.render(<span class="string">"com1"</span>, &#123;</span><br><span class="line">    el: <span class="string">"#app3"</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        name: <span class="string">"Ale.js"</span> <span class="comment">/* Can also have different properties */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="Local-component"><a href="#Local-component" class="headerlink" title="Local component"></a>Local component<div class="v100-add"></div></h4><p>If you don’t add a name when defining a component, the <code>Ale()</code> function will return you a <code>Ale local component build object</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Define a variable to receive the Ale local component generation object */</span></span><br><span class="line"><span class="keyword">var</span> com = Ale(&#123;</span><br><span class="line">    template: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"HelloWorld"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>You can render this component using the <code>render</code> function of <code>Ale local component generation object</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">com.render(&#123;</span><br><span class="line">    el: <span class="string">"#app"</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><script src="../../../../js/Ale.v1.min.js"></script><script>Ale("com1", {    template: function(){        return "HelloWorld";    }});Ale.render("com1", {    el: "#app"})Ale("com2", {    template: function(){        return "Hello "+this.data.name;    },    data: {        name: "World"    }});Ale.render("com2", {    el: "#app2"})Ale.render("com2", {    el: "#app3",    data: {        name: "Ale.js"    }})</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Component-Foundation&quot;&gt;&lt;a href=&quot;#Component-Foundation&quot; class=&quot;headerlink&quot; title=&quot;Component Foundation&quot;&gt;&lt;/a&gt;Component Foundation&lt;/h1&gt;&lt;
      
    
    </summary>
    
      <category term="v1" scheme="http://www.alejs.org/categories/v1/"/>
    
    
  </entry>
  
  <entry>
    <title>Install</title>
    <link href="http://www.alejs.org/guide/v1/Install/"/>
    <id>http://www.alejs.org/guide/v1/Install/</id>
    <published>2018-12-18T12:21:52.127Z</published>
    <updated>2019-01-13T02:28:14.335Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h1><h4 id="Compatibility"><a href="#Compatibility" class="headerlink" title="Compatibility"></a>Compatibility</h4><p>Ale does not support IE8 and below because Ale uses ECMAScript 5 features that IE8 cannot simulate. But it supports all ECMAScript 5 compliant browsers.</p><h4 id="Update-log"><a href="#Update-log" class="headerlink" title="Update log"></a>Update log</h4><p>Latest stable version: <strong>1.0.0</strong></p><p>See the <a href="https://github.com/Ale-js/ale/releases" target="_blank" rel="noopener">GitHub</a> for the update log for each version.</p><h3 id="Directly-introduced-with-lt-script-gt"><a href="#Directly-introduced-with-lt-script-gt" class="headerlink" title="Directly introduced with &lt;script&gt;"></a>Directly introduced with &lt;script&gt;</h3><p>Directly downloaded and introduced with the <code>&lt;script&gt;</code> tag, <code>Ale</code> will be registered as a global variable.</p><p></p><p class="info-box">Do not use uncompressed <code>ale.js</code> files in production versions, otherwise this will slow down your file loading! </p><p></p><p><a href="https://github.com/Ale-js/ale/tree/master/dist" target="_blank" rel="noopener"><button class="post-btn" style="margin-bottom: 15px">development version</button></a><br><a href="https://github.com/Ale-js/ale/releases" target="_blank" rel="noopener"><button class="post-btn">Production version</button></a></p><h4 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h4><p>We recommend linking to a specific version number that you can manually update:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/alejs@1.0.0/ale.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Please confirm to understand the different builds and use the production environment version in your published site, replacing <code>ale.js</code> with <code>ale.min.js</code>.</p><h3 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h3><p>NPM installation is recommended when building large applications with Ale, because NPM works well with module wrappers such as webpack or browserify.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> Latest stable version</span><br><span class="line"><span class="meta">$</span> npm i alejs</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Install&quot;&gt;&lt;a href=&quot;#Install&quot; class=&quot;headerlink&quot; title=&quot;Install&quot;&gt;&lt;/a&gt;Install&lt;/h1&gt;&lt;h4 id=&quot;Compatibility&quot;&gt;&lt;a href=&quot;#Compatibility&quot; class
      
    
    </summary>
    
      <category term="v1" scheme="http://www.alejs.org/categories/v1/"/>
    
    
  </entry>
  
  <entry>
    <title>Compare other frameworks</title>
    <link href="http://www.alejs.org/guide/v1/Comparison/"/>
    <id>http://www.alejs.org/guide/v1/Comparison/</id>
    <published>2018-12-18T12:14:50.113Z</published>
    <updated>2019-01-07T00:53:40.100Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Compare-other-frameworks"><a href="#Compare-other-frameworks" class="headerlink" title="Compare other frameworks"></a>Compare other frameworks</h1><p>Welcome to this page, we believe that the purpose of coming here is to understand the difference between Ale and other large frameworks, which is exactly what we want to answer here.</p><p>Objectively speaking, as the core developer of Ale, we will definitely prefer Ale, and think it would be better to solve it with Ale for some problems. But here, we want to describe everything as fair and accurate as possible. Other frameworks have significant advantages, such as React’s vast ecosystem, or like Angular and Vue, which have numerous solutions for large projects. We will try to list all of them.</p><p><br></p><p>We also want to get help from <strong>You</strong> to keep the documentation up to date, because the world of JavaScript is progressing too fast. If you notice an inaccurate or seemingly incorrect place, please submit a question for let us know.</p><p><br></p><h3 id="React"><a href="#React" class="headerlink" title="React"></a>React</h3><p>React and Ale are almost identical. In fact, React is the inspiration for the early Ale, they all have:</p><ul><li>Update only the necessary [use <strong>diff</strong> algorithm] when status (data) is updated</li><li>Provides view components for <strong>responsive</strong> and <strong>componentized</strong>.</li><li>Focus on the core library and pass other functions to the relevant libraries.</li></ul><p>Because there are many similarities, we will spend more time comparing them in this block. Here we not only guarantee the accuracy of the technical content, but also take into account the balance considerations. We need to recognize where React is better than Ale, such as a richer ecosystem.</p><h4 id="Performance"><a href="#Performance" class="headerlink" title="Performance"></a>Performance</h4><p>Here we only tested for <strong>component definition</strong> and <strong>component rendering</strong>, so the test results do not represent full performance. But what is certain is that Ale outperforms React in both respects: (defining a component and rendering 1000 elements)</p><ul><li>Ale: 46~52 (ms)</li><li>React: 307~336 (ms)</li></ul><p>Of course, we also did a test on responsive dynamic rendering, which showed that Ale performed dynamic rendering 2.5 times faster than React.</p><p>The reason for the slowness of React may be due to the fact that we use <code>Babel</code> for dynamic rendering. But don’t forget, Ale doesn’t need to compile. If you compile React ahead of time, this will be unfair to Ale.</p><h4 id="HTML-amp-CSS"><a href="#HTML-amp-CSS" class="headerlink" title="HTML &amp; CSS"></a>HTML &amp; CSS</h4><p>In React, everything is JavaScript. Not only can HTML be expressed in JSX, but the trend is now increasingly incorporating CSS into JavaScript. This type of approach has its advantages, but there are some trade-offs that are not acceptable to every developer.</p><p>Ale’s overall idea is to embrace and extend the classic Web technologies. We will analyze it in detail below.</p><h5 id="JSX-vs-Templates"><a href="#JSX-vs-Templates" class="headerlink" title="JSX vs Templates"></a>JSX vs Templates</h5><p>In React, the rendering capabilities of all components rely on JSX. JSX is a syntactic sugar for writing JavaScript using XML syntax.</p><p>Using JSX has the following advantages:</p><ul><li>You can build your view page using the full programming language JavaScript functionality. For example, you can use temporary variables, JS’s own flow control, and directly reference the values ​​in the current JS scope.</li><li>Development tools support JSX is more advanced than other available Ale templates (eg, linting, type checking, editor auto-completion).</li></ul><p>But in fact, Ale also provides rendering functions, and even Ale abandons the traditional Mustache (JSX) template and chooses a less popular rendering function, which includes the following aspects:</p><ul><li>Depends on JavaScript’s own complete compiler, so we no longer need to manually write the template rendering function, which can effectively improve the overall speed of Ale template compilation, because the rendering function is closer to the JavaScript compiler itself than the template engine.</li><li>When you add a JavaScript expression to a JSX template, some compilers don’t have a corresponding syntax hint. At the same time, in some scenarios, you really need the ability to fully program JavaScript.</li></ul><h4 id="Scale"><a href="#Scale" class="headerlink" title="Scale"></a>Scale</h4><h5 id="Expanding-up"><a href="#Expanding-up" class="headerlink" title="Expanding up"></a>Expanding up</h5><p>Well, to be honest, Ale is really not designed for large applications. We designed it to be able to handle almost all small and medium-sized applications.</p><p>In contrast, React provides powerful routing for large applications. And the React community is very innovative in terms of state management (such as Flux, Redux), which Ale can’t match.</p><h5 id="Downward-expansion"><a href="#Downward-expansion" class="headerlink" title="Downward expansion"></a>Downward expansion</h5><p>The React learning curve is steep, and you need to know JSX and ES2015 before you start learning React, because many examples use these syntaxes. You need to learn to build the system, although you can technically compile the code in real time with Babel, but this is not recommended for production environments.</p><p>However, Ale expands down to be very similar to jQuery. Because you just have to put the following tags on the page to run:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"ale.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Then you can write the Ale code and apply it to production. You just need to replace it with the min version of the Ale file without worrying about other performance issues.</p><p>Since Ale’s start-up phase doesn’t require any complex knowledge points, such as ES2015 and JSX, developers can build simple applications in less than half an hour by reading the guide.</p><h4 id="Native-rendering"><a href="#Native-rendering" class="headerlink" title="Native rendering"></a>Native rendering</h4><p>React Native enables you to write native rendering capabilities for apps (iOS and Android) using the same component model. Being able to develop across multiple platforms at the same time is great for developers. In contrast, Ale is a bit weaker in this regard. But we didn’t stop here. As Ale slowly develops, these build systems will be released accordingly, so stay tuned.</p><h4 id="Volume"><a href="#Volume" class="headerlink" title="Volume"></a>Volume</h4><p>Compared to React, Ale is extremely lightweight. Ale’s compressed files (not g-zip) [including APIs for manipulating DOM] are only about <strong>8kb</strong> size, while React’s core library plus DOM library is amazing<em> </em>108kb**.</p><h4 id="Preact-and-other-classes-React-library"><a href="#Preact-and-other-classes-React-library" class="headerlink" title="Preact and other classes React library"></a>Preact and other classes React library</h4><p>The libraries of the class React often share API and ecology with React as much as possible. Therefore the above comparison is equally applicable to them. They differ from React in that they have a smaller ecology and higher performance. However, because these libraries are not 100% compatible with all of the React ecosystem, some tools and auxiliary libraries may not be available. Or even if it seems to work, there may be incompatibility at any time, unless the React library you use is officially consistent with React.</p><h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><p>It is time to compare the most important frameworks. Earlier we said that React was the inspiration for early Ale. In fact, Ale’s more inspiration comes from Vue, which is why some of the features and APIs provided by Ale are very similar to Vue.</p><p>However, although Ale and Vue have similarities in some places, we recommend that you install both Ale and Vue, because Vue can make Ale’s development more efficient. But if you don’t want to do this, you can just install a framework.</p><h4 id="Complexity"><a href="#Complexity" class="headerlink" title="Complexity"></a>Complexity</h4><p>Ale.js is much simpler than Vue in both API and design, and is more suitable for beginners to learn, so you can quickly master all of its features and invest in development.</p><h4 id="Flexibility-and-componentization"><a href="#Flexibility-and-componentization" class="headerlink" title="Flexibility and componentization"></a>Flexibility and componentization</h4><p>Compared to Angular, Vue.js is a more flexible and open solution. But in Ale, this situation will change.</p><p>In fact, Vue enforces one-way data flow between different components, which makes the data flow in the application clearer and easier to understand, but it also limits the flexibility between components. In Ale, there are only composite components, and there are no parent and child components, and any component in the composite component can interoperate because they share a set of data.</p><h4 id="Performance-1"><a href="#Performance-1" class="headerlink" title="Performance"></a>Performance</h4><p>Here we are the same as React, and only tested for <strong>component definition</strong> and <strong>component rendering</strong>, so the test results do not represent the performance of all operations. But what is certain is that Ale outperforms Vue in both respects: (defining a component and rendering 1000 elements)</p><ul><li>Ale: 46~52 (ms)</li><li>Vue: 181~228 (ms)</li></ul><h4 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h4><p>Vue provides an official type declaration and component decorator for TS, but not everyone wants to use TS. In small and medium-sized projects, the introduction of TS may not bring much obvious advantages. In these cases, using Ale would be a better choice.</p><h4 id="Volume-1"><a href="#Volume-1" class="headerlink" title="Volume"></a>Volume</h4><p>The separate vue.min.js file has a size of <strong>88kb</strong>, while Ale has a size of only about <strong>8kb</strong>, which is relatively lightweight compared to Vue.</p><h4 id="learning-curve"><a href="#learning-curve" class="headerlink" title="learning curve"></a>learning curve</h4><p>In this regard, both frameworks are similar, except that you need to have a good HTML and JavaScript foundation. With these basic skills, you can invest in development very quickly through the reading guide.</p><p>But specifically, Vue’s API area is much larger than Ale, so you need to understand more concepts to get productive. Of course, the complexity of Vue itself is because it is designed to target large, complex applications. But it is undeniable that this also makes it quite unfriendly to developers who are not experienced enough.</p><h3 id="Angular"><a href="#Angular" class="headerlink" title="Angular"></a>Angular</h3><p>Of course, the editors don’t know much about Angular, so they don’t make a good comparison. Here, we hope that more experienced developers can help us write articles comparing Angular. You can click on the <strong>Edit page</strong> below, then go to Github to submit, thank you for your support and understanding!</p><h3 id="Supplement"><a href="#Supplement" class="headerlink" title="Supplement"></a>Supplement</h3><p>In fact, there is one more thing to add in terms of performance, because Vue and React use virtual DOM and diff algorithms. Ale actually traverses the real DOM tree directly, and then uses the diff algorithm to compare the differences. This is similar to Angular’s dirty check, and performance is affected. However, this approach also eliminates the need to create a virtual DOM tree.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Compare-other-frameworks&quot;&gt;&lt;a href=&quot;#Compare-other-frameworks&quot; class=&quot;headerlink&quot; title=&quot;Compare other frameworks&quot;&gt;&lt;/a&gt;Compare other 
      
    
    </summary>
    
      <category term="v1" scheme="http://www.alejs.org/categories/v1/"/>
    
    
  </entry>
  
</feed>
